   Compiling caulk v0.1.0 (/home/caizhuo/code/caulk-updatable-lookup-argument-ccs24-local)
warning: unused import: `std::fmt::DebugMap`
 --> src/dft.rs:7:5
  |
7 | use std::fmt::DebugMap;
  |     ^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Div`
 --> src/dft.rs:8:21
  |
8 | use std::ops::{Add, Div, Mul, Neg, Sub};
  |                     ^^^

warning: unused import: `PairingEngine`
 --> src/dft.rs:9:14
  |
9 | use ark_ec::{PairingEngine, ProjectiveCurve};
  |              ^^^^^^^^^^^^^

warning: unused import: `ark_serialize::CanonicalSerialize`
  --> src/dft.rs:15:5
   |
15 | use ark_serialize::CanonicalSerialize;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::ops::Neg`
   --> src/dft.rs:756:9
    |
756 |     use std::ops::Neg;
    |         ^^^^^^^^^^^^^

warning: unused import: `ark_ec::mnt4::G1Projective`
   --> src/dft.rs:760:9
    |
760 |     use ark_ec::mnt4::G1Projective;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ark_bn254::G2Affine`
  --> src/kzg.rs:20:5
   |
20 | use ark_bn254::G2Affine;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unnecessary parentheses around assigned value
   --> src/kzg.rs:311:18
    |
311 |         status = (prod.is_one());
    |                  ^             ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
311 -         status = (prod.is_one());
311 +         status = prod.is_one();
    |

warning: unused import: `ark_bls12_377::g2`
 --> src/multi/setup.rs:2:5
  |
2 | use ark_bls12_377::g2;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `ark_test_curves::pairing::Pairing`
  --> src/multi/setup.rs:12:5
   |
12 | use ark_test_curves::pairing::Pairing;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ark_bls12_381::Bls12_381`
  --> src/multi/setup.rs:21:5
   |
21 | use ark_bls12_381::Bls12_381;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ark_bn254::Bn254`
  --> src/multi/setup.rs:22:5
   |
22 | use ark_bn254::Bn254;
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `std::marker::PhantomData`
 --> src/ramlookup/caulkplus.rs:4:5
  |
4 | use std::marker::PhantomData;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ark_msm::msm::VariableBaseMSM`
 --> src/ramlookup/caulkplus.rs:8:5
  |
8 | use ark_msm::msm::VariableBaseMSM;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `RngCore` and `Rng`
  --> src/ramlookup/caulkplus.rs:13:12
   |
13 | use rand::{Rng, RngCore};
   |            ^^^  ^^^^^^^

warning: unnecessary parentheses around assigned value
   --> src/ramlookup/caulkplus.rs:269:15
    |
269 |     let b_c = (lhs == rhs);
    |               ^          ^
    |
help: remove these parentheses
    |
269 -     let b_c = (lhs == rhs);
269 +     let b_c = lhs == rhs;
    |

warning: unnecessary parentheses around assigned value
   --> src/ramlookup/caulkplus.rs:276:21
    |
276 |     let b_opening = (E::pairing(u_com, g2) == E::pairing(proof.z_i_com, proof.g2_opening));
    |                     ^                                                                    ^
    |
help: remove these parentheses
    |
276 -     let b_opening = (E::pairing(u_com, g2) == E::pairing(proof.z_i_com, proof.g2_opening));
276 +     let b_opening = E::pairing(u_com, g2) == E::pairing(proof.z_i_com, proof.g2_opening);
    |

warning: unused import: `PrimeField`
   --> src/ramlookup/caulkplus.rs:697:25
    |
697 |     use ark_ff::{Field, PrimeField};
    |                         ^^^^^^^^^^

warning: unused import: `ark_bls12_381::Fr`
   --> src/ramlookup/caulkplus.rs:698:9
    |
698 |     use ark_bls12_381::Fr;
    |         ^^^^^^^^^^^^^^^^^

warning: unused import: `crate::multi::generate_lookup_input`
   --> src/ramlookup/caulkplus.rs:701:9
    |
701 |     use crate::multi::generate_lookup_input;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ark_ff::One`
   --> src/ramlookup/fastupdate.rs:379:9
    |
379 |     use ark_ff::One;
    |         ^^^^^^^^^^^

warning: unused import: `crate::multi::TableInput`
 --> src/ramlookup/cq.rs:1:5
  |
1 | use crate::multi::TableInput;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `CaulkPlusProverInput` and `CaulkPlusPublicParams`
 --> src/ramlookup/cq.rs:2:35
  |
2 | use crate::ramlookup::caulkplus::{CaulkPlusProverInput, CaulkPlusPublicParams};
  |                                   ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `compute_scalar_coefficients_naive`
 --> src/ramlookup/cq.rs:4:34
  |
4 |     compute_scalar_coefficients, compute_scalar_coefficients_naive,
  |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `cfg_into_iter`
  --> src/ramlookup/cq.rs:13:15
   |
13 | use ark_std::{cfg_into_iter, UniformRand};
   |               ^^^^^^^^^^^^^

warning: unused import: `DivAssign`
  --> src/ramlookup/cq.rs:21:37
   |
21 | use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Neg};
   |                                     ^^^^^^^^^

warning: unnecessary parentheses around method argument
    --> src/ramlookup/cq.rs:1115:45
     |
1115 |         let mut f = File::open(path).expect((format!("Unable to open file {path}").as_str()));
     |                                             ^                                              ^
     |
help: remove these parentheses
     |
1115 -         let mut f = File::open(path).expect((format!("Unable to open file {path}").as_str()));
1115 +         let mut f = File::open(path).expect(format!("Unable to open file {path}").as_str());
     |

warning: unnecessary parentheses around method argument
    --> src/ramlookup/cq.rs:1475:49
     |
1475 |             let mut f = File::open(path).expect((format!("Unable to open file {path}").as_str()));
     |                                                 ^                                              ^
     |
help: remove these parentheses
     |
1475 -             let mut f = File::open(path).expect((format!("Unable to open file {path}").as_str()));
1475 +             let mut f = File::open(path).expect(format!("Unable to open file {path}").as_str());
     |

warning: denote infinite loops with `loop { ... }`
    --> src/ramlookup/cq.rs:1650:13
     |
1650 |             while true {
     |             ^^^^^^^^^^ help: use `loop`
     |
     = note: `#[warn(while_true)]` on by default

warning: unnecessary parentheses around `if` condition
    --> src/ramlookup/cq.rs:2064:16
     |
2064 |             if (*log_k == 0) {
     |                ^           ^
     |
help: remove these parentheses
     |
2064 -             if (*log_k == 0) {
2064 +             if *log_k == 0 {
     |

warning: unused import: `std::marker::PhantomData`
 --> src/ramlookup/mod.rs:6:5
  |
6 | use std::marker::PhantomData;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Neg`
 --> src/ramlookup/mod.rs:7:48
  |
7 | use std::ops::{AddAssign, Div, Mul, MulAssign, Neg, Sub};
  |                                                ^^^

warning: unused imports: `BigInteger` and `FftField`
 --> src/ramlookup/mod.rs:9:14
  |
9 | use ark_ff::{BigInteger, FftField, Field, One, PrimeField, Zero};
  |              ^^^^^^^^^^  ^^^^^^^^

warning: unused import: `kzg10`
  --> src/ramlookup/mod.rs:11:23
   |
11 | use ark_poly_commit::{kzg10, Polynomial, UVPolynomial};
   |                       ^^^^^

warning: unused import: `Proof`
  --> src/ramlookup/mod.rs:12:30
   |
12 | use ark_poly_commit::kzg10::{Proof, VerifierKey};
   |                              ^^^^^

warning: unused imports: `log2` and `test_rng`
  --> src/ramlookup/mod.rs:13:15
   |
13 | use ark_std::{log2, test_rng, time::Instant, UniformRand};
   |               ^^^^  ^^^^^^^^

warning: unused import: `merlin::Transcript`
  --> src/ramlookup/mod.rs:14:5
   |
14 | use merlin::Transcript;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `LookupInstance`, `LookupProverInput`, `compute_lookup_proof`, `get_poly_and_g2_openings`, and `verify_lookup_proof`
  --> src/ramlookup/mod.rs:16:5
   |
16 |     compute_lookup_proof, get_poly_and_g2_openings, verify_lookup_proof, LookupInstance,
   |     ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^
17 |     LookupProverInput,
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `ark_ff::PrimeField`
    --> src/ramlookup/mod.rs:1118:9
     |
1118 |     use ark_ff::PrimeField;
     |         ^^^^^^^^^^^^^^^^^^

warning: unnecessary parentheses around `if` condition
    --> src/ramlookup/mod.rs:1288:16
     |
1288 |             if (tree[cur_node] >= level_threshold) {
     |                ^                                 ^
     |
help: remove these parentheses
     |
1288 -             if (tree[cur_node] >= level_threshold) {
1288 +             if tree[cur_node] >= level_threshold {
     |

warning: unused import: `AffineCurve`
   --> src/dft.rs:761:18
    |
761 |     use ark_ec::{AffineCurve, PairingEngine};
    |                  ^^^^^^^^^^^

warning: unused import: `ark_test_curves::pairing::Pairing`
  --> src/ramlookup/cq.rs:14:5
   |
14 | use ark_test_curves::pairing::Pairing;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: value assigned to `result` is never read
  --> src/dft.rs:47:13
   |
47 |     let mut result: DensePolynomial<F> = DensePolynomial::zero();
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?
   = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `p`
  --> src/dft.rs:40:5
   |
40 |     p: usize,       // log of domain size
   |     ^ help: if this is intentional, prefix it with an underscore: `_p`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `p`
  --> src/dft.rs:72:5
   |
72 |     p: usize,               // log of degree
   |     ^ help: if this is intentional, prefix it with an underscore: `_p`

warning: value assigned to `result` is never read
  --> src/dft.rs:97:13
   |
97 |     let mut result: DensePolynomial<F> = DensePolynomial::zero();
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: unused variable: `i`
   --> src/dft.rs:101:9
    |
101 |     for i  in 0usize..(ark_std::log2(l) as usize)  {
    |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: variable does not need to be mutable
   --> src/dft.rs:109:13
    |
109 |         let mut fred: DensePolynomial<F> = DensePolynomial::from_coefficients_vec(f_coeffs);
    |             ----^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: value assigned to `quotient` is never read
   --> src/dft.rs:135:13
    |
135 |     let mut quotient: DensePolynomial<F> = DensePolynomial::zero();
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `remainder` is never read
   --> src/dft.rs:136:13
    |
136 |     let mut remainder: DensePolynomial<F> = DensePolynomial::zero();
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `quotient` is never read
   --> src/dft.rs:183:13
    |
183 |     let mut quotient: DensePolynomial<F> = DensePolynomial::zero();
    |             ^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `remainder` is never read
   --> src/dft.rs:184:13
    |
184 |     let mut remainder: DensePolynomial<F> = DensePolynomial::zero();
    |             ^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/dft.rs:308:9
    |
308 |     let mut start = Instant::now();
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `a_poly`
   --> src/dft.rs:405:5
    |
405 |     a_poly: &DensePolynomial<F>,
    |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_a_poly`

warning: unused variable: `b_poly`
   --> src/dft.rs:406:5
    |
406 |     b_poly: &DensePolynomial<F>,
    |     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_b_poly`

warning: unused variable: `i`
   --> src/dft.rs:814:13
    |
814 |         for i in 1..npolys {
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `start`
   --> src/dft.rs:850:17
    |
850 |         let mut start = Instant::now();
    |                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_start`

warning: unused variable: `prod`
   --> src/dft.rs:854:13
    |
854 |         let prod = VariableBaseMSM::multi_scalar_mul(grp_vec.as_slice(), scalar_vec.as_slice());
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_prod`

warning: variable does not need to be mutable
   --> src/dft.rs:850:13
    |
850 |         let mut start = Instant::now();
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `rng`
   --> src/dft.rs:868:17
    |
868 |         let mut rng = test_rng();
    |                 ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: variable does not need to be mutable
   --> src/dft.rs:868:13
    |
868 |         let mut rng = test_rng();
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `rng`
   --> src/dft.rs:878:17
    |
878 |         let mut rng = test_rng();
    |                 ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: variable does not need to be mutable
   --> src/dft.rs:878:13
    |
878 |         let mut rng = test_rng();
    |             ----^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `coeffs`
   --> src/dft.rs:901:13
    |
901 |         let coeffs: Vec<E::Fr> = vec![E::Fr::from(1u128), E::Fr::from(1u128), E::Fr::from(1u128)];
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_coeffs`

warning: unused variable: `points`
   --> src/dft.rs:902:13
    |
902 |         let points: Vec<E::Fr> = vec![
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_points`

warning: variable does not need to be mutable
   --> src/dft.rs:936:13
    |
936 |         let mut start = Instant::now();
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `i`
   --> src/dft.rs:954:13
    |
954 |         for i in 0..npolys {
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: variable does not need to be mutable
   --> src/dft.rs:959:13
    |
959 |         let mut start = Instant::now();
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: value assigned to `status` is never read
   --> src/kzg.rs:298:17
    |
298 |         let mut status: bool  = false;
    |                 ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `ptneg`
   --> src/kzg.rs:303:13
    |
303 |         let ptneg = -*point;
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_ptneg`

warning: unused variable: `rhs`
   --> src/kzg.rs:305:13
    |
305 |         let rhs:E::G2Affine = g2x + g2.mul(-*point).into_affine();
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_rhs`

warning: unused variable: `lhs`
   --> src/kzg.rs:306:13
    |
306 |         let lhs:E::G1Affine = *c_com + g1.mul(-*eval).into_affine();
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_lhs`

warning: unused variable: `pi`
   --> src/kzg.rs:296:9
    |
296 |         pi: &E::G1Affine,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_pi`

warning: value assigned to `res` is never read
   --> src/multi/setup.rs:261:17
    |
261 |         let mut res = File::open(path.clone());
    |                 ^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
   --> src/multi/setup.rs:297:21
    |
297 |                 let mut beta = E::Fr::rand(rng);
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: unused variable: `actual_degree`
   --> src/multi/mod.rs:753:13
    |
753 |         let actual_degree = N - 1;
    |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_actual_degree`

warning: unused variable: `path`
   --> src/multi/mod.rs:754:13
    |
754 |         let path = format!("/tmp/poly_openings_{}.log", E::Fq::size_in_bits());
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `rng`
   --> src/multi/mod.rs:757:13
    |
757 |         let rng = &mut ark_std::test_rng();
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: unused variable: `c_com`
   --> src/multi/mod.rs:761:13
    |
761 |         let c_com = KZGCommit::<E>::commit_g1(&pp.poly_ck, &c_poly);
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_c_com`

warning: unused variable: `openings`
   --> src/multi/mod.rs:764:13
    |
764 |         let openings = KZGCommit::<E>::multiple_open::<E::G2Affine>(&c_poly, &pp.g2_powers, pp.n);
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_openings`

warning: variable does not need to be mutable
   --> src/multi/mod.rs:760:13
    |
760 |         let mut start = Instant::now();
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `rng`
  --> src/ramlookup/caulkplus.rs:87:13
   |
87 |     let mut rng = ark_std::test_rng();
   |             ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: unused variable: `h_domain`
  --> src/ramlookup/caulkplus.rs:89:9
   |
89 |     let h_domain: GeneralEvaluationDomain<E::Fr> = GeneralEvaluationDomain::new(1 << instance.h_domain_size).unwrap();
   |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_h_domain`

warning: unused variable: `val_s`
   --> src/ramlookup/caulkplus.rs:156:10
    |
156 |     let (val_s, pi_s) = KZGCommit::<E>::open_g1_batch(
    |          ^^^^^ help: if this is intentional, prefix it with an underscore: `_val_s`

warning: variable does not need to be mutable
  --> src/ramlookup/caulkplus.rs:87:9
   |
87 |     let mut rng = ark_std::test_rng();
   |         ----^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `i`
   --> src/ramlookup/caulkplus.rs:488:13
    |
488 |         for i in 0..pp.g2_powers.len() {
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `i`
   --> src/ramlookup/caulkplus.rs:567:9
    |
567 |     for i in 0..pp.g2_powers.len() {
    |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `i`
   --> src/ramlookup/caulkplus.rs:602:9
    |
602 |     for i in 0..m {
    |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `i`
   --> src/ramlookup/caulkplus.rs:609:9
    |
609 |     for i in a_vec.len()..m {
    |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `rng`
   --> src/ramlookup/caulkplus.rs:635:13
    |
635 |     let mut rng = ark_std::test_rng();
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: variable does not need to be mutable
   --> src/ramlookup/caulkplus.rs:635:9
    |
635 |     let mut rng = ark_std::test_rng();
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/ramlookup/caulkplus.rs:636:9
    |
636 |     let mut i_vec = example.a_vec.clone();
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> src/ramlookup/caulkplus.rs:766:13
    |
766 |         let mut start = Instant::now();
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `z_i_poly`
   --> src/ramlookup/caulkplus.rs:803:50
    |
803 |         let (a_poly, v_poly, t_i_poly, l_i_poly, z_i_poly, h_poly) = (
    |                                                  ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_z_i_poly`

warning: variable does not need to be mutable
   --> src/ramlookup/caulkplus.rs:838:13
    |
838 |         let mut start = Instant::now();
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `i`
   --> src/ramlookup/caulkplus.rs:885:13
    |
885 |         for i in 0usize..1000 {
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `domain_size`
   --> src/ramlookup/fastupdate.rs:355:5
    |
355 |     domain_size: usize,
    |     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_domain_size`

warning: unused variable: `i`
   --> src/ramlookup/fastupdate.rs:409:13
    |
409 |         for i in 0..i_set.len() {
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `i`
   --> src/ramlookup/fastupdate.rs:413:13
    |
413 |         for i in 0..k_set.len() {
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `evals_I`
   --> src/ramlookup/fastupdate.rs:464:13
    |
464 |         let evals_I = compute_reciprocal_sum(&t_j_vec, &k_set, &i_set, &h_domain, h_domain_size, &mut cache);
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_evals_I`

warning: unused variable: `evals_I_naive`
   --> src/ramlookup/fastupdate.rs:468:13
    |
468 |         let evals_I_naive = compute_reciprocal_sum_naive(&t_j_vec, &k_set, &i_set, &h_domain, h_domain_size);
    |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_evals_I_naive`

warning: variable does not need to be mutable
   --> src/ramlookup/fastupdate.rs:462:13
    |
462 |         let mut start = Instant::now();
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/ramlookup/fastupdate.rs:467:13
    |
467 |         let mut start = Instant::now();
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `i`
   --> src/ramlookup/cq.rs:197:13
    |
197 |         for i in 0..(k - m) {
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `i`
   --> src/ramlookup/cq.rs:206:13
    |
206 |         for i in 0..m {
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: variable does not need to be mutable
   --> src/ramlookup/cq.rs:238:13
    |
238 |         let mut i_set_vec: Vec<usize> = m_set.clone().into_iter().collect::<Vec<_>>();
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `i`
   --> src/ramlookup/cq.rs:314:13
    |
314 |         for i in 0..(k - m) {
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: variable does not need to be mutable
   --> src/ramlookup/cq.rs:343:13
    |
343 |         let mut i_set_vec: Vec<usize> = m_set.clone().into_iter().collect::<Vec<_>>();
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/ramlookup/cq.rs:459:13
    |
459 |         let mut i_set_vec: Vec<usize> = m_set.clone().into_iter().collect::<Vec<_>>();
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/ramlookup/cq.rs:698:9
    |
698 |     let mut start = Instant::now();
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `i`
    --> src/ramlookup/cq.rs:1345:13
     |
1345 |         for i in 0..pp.poly_ck.powers_of_g.len() {
     |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `g2`
    --> src/ramlookup/cq.rs:1349:13
     |
1349 |         let g2 = pp.g2_powers[0];
     |             ^^ help: if this is intentional, prefix it with an underscore: `_g2`

warning: unused variable: `i`
    --> src/ramlookup/cq.rs:1435:17
     |
1435 |             for i in 0..pp.poly_ck.powers_of_g.len() {
     |                 ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `o_bytes`
    --> src/ramlookup/cq.rs:1494:21
     |
1494 |             let mut o_bytes = Vec::<u8>::new();
     |                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_o_bytes`

warning: unused variable: `h_domain_size`
    --> src/ramlookup/cq.rs:1469:33
     |
1469 | fn load_table_or_new(N: &usize, h_domain_size: &usize, path: &str) -> Vec<usize> {
     |                                 ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_h_domain_size`

warning: variable does not need to be mutable
    --> src/ramlookup/cq.rs:1494:17
     |
1494 |             let mut o_bytes = Vec::<u8>::new();
     |                 ----^^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/ramlookup/cq.rs:1552:13
     |
1552 |         let mut base_table: Vec<usize> = load_table_or_new(&N, &h, &path);
     |             ----^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `rng`
    --> src/ramlookup/cq.rs:1644:21
     |
1644 |             let mut rng = ark_std::test_rng();
     |                     ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: unused variable: `cq_pp`
    --> src/ramlookup/cq.rs:1666:17
     |
1666 |             let cq_pp: CqPublicParams<E> = CqPublicParams::load(_h_domain_size);
     |                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_cq_pp`

warning: value assigned to `table_pp` is never read
    --> src/ramlookup/cq.rs:1697:21
     |
1697 |                     table_pp = CqProverInput::load_by_path(&table_pp_path)
     |                     ^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/ramlookup/cq.rs:1644:17
     |
1644 |             let mut rng = ark_std::test_rng();
     |                 ----^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/ramlookup/cq.rs:1675:17
     |
1675 |             let mut base_table: Vec<usize> = load_table_or_new(&N, &_h_domain_size, &path);
     |                 ----^^^^^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: variable does not need to be mutable
    --> src/ramlookup/cq.rs:1685:17
     |
1685 |             let mut start = Instant::now();
     |                 ----^^^^^
     |                 |
     |                 help: remove this `mut`

warning: unused variable: `cq_pp`
    --> src/ramlookup/cq.rs:1735:21
     |
1735 |                 let cq_pp: CqPublicParams<E> = CqPublicParams::new(&pp, log_table_sizes[i], false);
     |                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_cq_pp`

warning: unused variable: `table_pp`
    --> src/ramlookup/cq.rs:1772:21
     |
1772 |                 let table_pp =
     |                     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_table_pp`

warning: unused variable: `pos`
    --> src/ramlookup/cq.rs:1863:29
     |
1863 |                         let pos = f_vec.push(
     |                             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `proof`
    --> src/ramlookup/cq.rs:1921:25
     |
1921 |                     let proof = compute_cq_proof::<E>(
     |                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_proof`

warning: value assigned to `prev_lookup_time` is never read
    --> src/ramlookup/cq.rs:1934:29
     |
1934 |                     let mut prev_lookup_time = 0.0 as f64;
     |                             ^^^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?

warning: variable does not need to be mutable
    --> src/ramlookup/cq.rs:2027:13
     |
2027 |         let mut base_table: Vec<usize> = load_table_or_new(&N, &_h_domain_size, &path);
     |             ----^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: variable does not need to be mutable
    --> src/ramlookup/cq.rs:2098:17
     |
2098 |             let mut timer_tcom = Instant::now();
     |                 ----^^^^^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: unused variable: `g1x`
    --> src/ramlookup/cq.rs:2207:13
     |
2207 |         let g1x = pp.poly_ck.powers_of_g[1];
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_g1x`

warning: unused variable: `i`
    --> src/ramlookup/cq.rs:2211:13
     |
2211 |         for i in 0usize..1000 {
     |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: variable does not need to be mutable
    --> src/ramlookup/cq.rs:2260:13
     |
2260 |         let mut start = Instant::now();
     |             ----^^^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `i`
  --> src/ramlookup/mod.rs:67:9
   |
67 |     for i in 0..vec_size {
   |         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: value assigned to `proof` is never read
   --> src/ramlookup/mod.rs:320:13
    |
320 |     let mut proof: Option<ProofConcat<E>> = None;
    |             ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `g_com`
   --> src/ramlookup/mod.rs:412:9
    |
412 |     let g_com = KZGCommit::commit_g1(&pp.poly_ck, &g_poly);
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_g_com`

warning: value assigned to `status` is never read
   --> src/ramlookup/mod.rs:447:13
    |
447 |     let mut status: bool = false;
    |             ^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `m_domain`
   --> src/ramlookup/mod.rs:553:13
    |
553 |         let m_domain = GeneralEvaluationDomain::<E::Fr>::new(m).unwrap();
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_m_domain`

warning: unused variable: `pp`
   --> src/ramlookup/mod.rs:750:5
    |
750 |     pp: &PublicParameters<E>
    |     ^^ help: if this is intentional, prefix it with an underscore: `_pp`

warning: unused variable: `m_domain`
   --> src/ramlookup/mod.rs:852:9
    |
852 |     let m_domain: GeneralEvaluationDomain<E::Fr> = GeneralEvaluationDomain::new(m).unwrap();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_m_domain`

warning: unused variable: `val_s`
   --> src/ramlookup/mod.rs:964:10
    |
964 |     let (val_s, proof_s) = KZGCommit::<E>::open_g1_batch(
    |          ^^^^^ help: if this is intentional, prefix it with an underscore: `_val_s`

warning: unused variable: `val_ws`
   --> src/ramlookup/mod.rs:971:10
    |
971 |     let (val_ws, proof_ws) = KZGCommit::<E>::open_g1_batch(
    |          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_val_ws`

warning: unused variable: `k_domain_size`
    --> src/ramlookup/mod.rs:1130:13
     |
1130 |         let k_domain_size: usize = 9;
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_k_domain_size`

warning: unused variable: `proof`
    --> src/ramlookup/mod.rs:1149:13
     |
1149 |         let proof = compute_monotonic_proof::<E>(
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_proof`

warning: variable does not need to be mutable
    --> src/ramlookup/mod.rs:1148:13
     |
1148 |         let mut start = Instant::now();
     |             ----^^^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `rng`
    --> src/ramlookup/mod.rs:1161:17
     |
1161 |         let mut rng = ark_std::test_rng();
     |                 ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: unused variable: `n_domain_size`
    --> src/ramlookup/mod.rs:1165:13
     |
1165 |         let n_domain_size: usize = 0;
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_n_domain_size`

warning: unused variable: `k`
    --> src/ramlookup/mod.rs:1169:13
     |
1169 |         let k: usize = 1 << k_domain_size;
     |             ^ help: if this is intentional, prefix it with an underscore: `_k`

warning: variable does not need to be mutable
    --> src/ramlookup/mod.rs:1161:13
     |
1161 |         let mut rng = ark_std::test_rng();
     |             ----^^^
     |             |
     |             help: remove this `mut`

warning: value assigned to `cost` is never read
    --> src/ramlookup/mod.rs:1270:17
     |
1270 |         let mut cost: f64 = 0.0;
     |                 ^^^^
     |
     = help: maybe it is overwritten before being read?

warning: unused variable: `j`
    --> src/ramlookup/mod.rs:1278:17
     |
1278 |             for j in 0..depth {
     |                 ^ help: if this is intentional, prefix it with an underscore: `_j`

warning: struct `CommittedRAM` is never constructed
  --> src/ramlookup/mod.rs:30:12
   |
30 | pub struct CommittedRAM<E: PairingEngine> {
   |            ^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: struct `OperationBatch` is never constructed
  --> src/ramlookup/mod.rs:35:12
   |
35 | pub struct OperationBatch<E: PairingEngine> {
   |            ^^^^^^^^^^^^^^

warning: struct `ProverInputCommon` is never constructed
   --> src/ramlookup/mod.rs:165:12
    |
165 | pub struct ProverInputCommon<E: PairingEngine> {
    |            ^^^^^^^^^^^^^^^^^

warning: struct `VerifierInputCommon` is never constructed
   --> src/ramlookup/mod.rs:175:12
    |
175 | pub struct VerifierInputCommon<E: PairingEngine> {
    |            ^^^^^^^^^^^^^^^^^^^

warning: multiple fields are never read
   --> src/ramlookup/mod.rs:527:9
    |
526 | pub struct MonotonicTranscriptExample<E: PairingEngine> {
    |            -------------------------- fields in this struct
527 |     pub a_vec: Vec<usize>,
    |         ^^^^^
528 |     pub v_vec: Vec<usize>,
    |         ^^^^^
529 |     pub a_dash_vec: Vec<usize>,
    |         ^^^^^^^^^^
530 |     pub v_dash_vec: Vec<usize>,
    |         ^^^^^^^^^^
531 |     pub op_vec: Vec<usize>,
    |         ^^^^^^
532 |     pub a_bar_vec: Vec<usize>,
    |         ^^^^^^^^^
533 |     pub v_bar_vec: Vec<usize>,
    |         ^^^^^^^^^
...
538 |     pub tr: RAMTranscript<E>,
    |         ^^
...
541 |     pub addr_tr_com: RAMTranscriptCom<E>,
    |         ^^^^^^^^^^^
542 |     pub m_domain_size: usize,
543 |     pub h_domain_size: usize,
    |         ^^^^^^^^^^^^^

warning: multiple fields are never read
   --> src/ramlookup/mod.rs:703:9
    |
702 | pub struct ProofMonotonic<E: PairingEngine> {
    |            -------------- fields in this struct
703 |     pub z1_com: E::G1Affine,
    |         ^^^^^^
704 |     pub z2_com: E::G1Affine,
    |         ^^^^^^
705 |     pub delta_A_com: E::G1Affine,
    |         ^^^^^^^^^^^
706 |     pub delta_T_com: E::G1Affine,
    |         ^^^^^^^^^^^
707 |     pub q1_com: E::G1Affine,
    |         ^^^^^^
708 |     pub q2_com: E::G1Affine,
    |         ^^^^^^
709 |
710 |     pub val_A_s: E::Fr,
    |         ^^^^^^^
711 |     pub val_A_ws: E::Fr,
    |         ^^^^^^^^
712 |     pub val_deltaA_s: E::Fr,
    |         ^^^^^^^^^^^^
713 |     pub val_deltaT_s: E::Fr,
    |         ^^^^^^^^^^^^
714 |     pub val_T_s: E::Fr,
    |         ^^^^^^^
715 |     pub val_T_ws: E::Fr,
    |         ^^^^^^^^
716 |     pub val_op_ws: E::Fr,
    |         ^^^^^^^^^
717 |     pub val_V_s: E::Fr,
    |         ^^^^^^^
718 |     pub val_V_ws: E::Fr,
    |         ^^^^^^^^
719 |     pub val_Q1_s: E::Fr,
    |         ^^^^^^^^
720 |     pub val_Q2_s: E::Fr,
    |         ^^^^^^^^
721 |     pub val_Z1_s: E::Fr,
    |         ^^^^^^^^
722 |     pub val_Z2_s: E::Fr,
    |         ^^^^^^^^
723 |
724 |     pub pi_s: E::G1Affine,
    |         ^^^^
725 |     pub pi_ws: E::G1Affine,
    |         ^^^^^
726 |
727 |     pub range_proof_A: CqProof<E>,
    |         ^^^^^^^^^^^^^
728 |     pub range_proof_deltaA: CqProof<E>,
    |         ^^^^^^^^^^^^^^^^^^
729 |     pub range_proof_deltaT: CqProof<E>,
    |         ^^^^^^^^^^^^^^^^^^
730 |     pub range_proof_t: CqProof<E>
    |         ^^^^^^^^^^^^^

warning: fields `set_I1` and `set_I2` are never read
   --> src/ramlookup/mod.rs:735:9
    |
734 | pub struct ProofMonotonicProverInput<E: PairingEngine> {
    |            ------------------------- fields in this struct
735 |     pub set_I1: Vec<usize>,
    |         ^^^^^^
736 |     pub set_I2: Vec<usize>,
    |         ^^^^^^

warning: field `t_poly` is never read
  --> src/ramlookup/caulkplus.rs:32:9
   |
30 | pub struct CaulkPlusProverInput<E: PairingEngine> {
   |            -------------------- field in this struct
31 |     pub t_com: E::G1Affine,                          // commitment to table
32 |     pub t_poly: DensePolynomial<E::Fr>,             // polynomial interpolating the table on h_domain
   |         ^^^^^^

warning: method `store` is never used
   --> src/ramlookup/caulkplus.rs:284:12
    |
282 | impl<E: PairingEngine> CaulkPlusProverInput<E> {
    | ---------------------------------------------- method in this implementation
283 |     // store the prover input in a file
284 |     pub fn store(&self, h_domain_size: usize) {
    |            ^^^^^

warning: associated function `new` is never used
   --> src/ramlookup/caulkplus.rs:412:12
    |
323 | impl<E: PairingEngine> CaulkPlusPublicParams<E> {
    | ----------------------------------------------- associated function in this implementation
...
412 |     pub fn new(
    |            ^^^

warning: field `zk_dvt_poly` is never read
  --> src/ramlookup/fastupdate.rs:12:9
   |
8  | pub struct UpdateParamsSetK<F: PrimeField> {
   |            ---------------- field in this struct
...
12 |     pub zk_dvt_poly: DensePolynomial<F>,    // derivative of Z_K
   |         ^^^^^^^^^^^

warning: field `pi_h` is never read
   --> src/ramlookup/cq.rs:147:9
    |
135 | pub struct CqProof<E: PairingEngine> {
    |            ------- field in this struct
...
147 |     pub pi_h: E::G1Affine,    // evaluation proof for h(\gamma).
    |         ^^^^

warning: field `b_poly` is never read
   --> src/ramlookup/cq.rs:751:9
    |
747 | pub struct CqLookupInputRound2<E: PairingEngine> {
    |            ------------------- field in this struct
...
751 |     pub b_poly: DensePolynomial<E::Fr>,    // B polynomial interpolating 1/(beta + f_i)
    |         ^^^^^^

warning: field `h_poly` is never read
   --> src/ramlookup/cq.rs:763:9
    |
762 | pub struct CqLookupInputRound3<E: PairingEngine> {
    |            ------------------- field in this struct
763 |     pub h_poly: DensePolynomial<E::Fr>, // h = B0 + \eta f + \eta^2 Q_B
    |         ^^^^^^

warning: variable `rand_A_polys` should have a snake case name
   --> src/dft.rs:950:17
    |
950 |         let mut rand_A_polys: Vec<DensePolynomial<E::Fr>> = Vec::new();
    |                 ^^^^^^^^^^^^ help: convert the identifier to snake case: `rand_a_polys`
    |
    = note: `#[warn(non_snake_case)]` on by default

warning: variable `rand_B_polys` should have a snake case name
   --> src/dft.rs:951:17
    |
951 |         let mut rand_B_polys: Vec<DensePolynomial<E::Fr>> = Vec::new();
    |                 ^^^^^^^^^^^^ help: convert the identifier to snake case: `rand_b_polys`

warning: variable `rand_C_polys` should have a snake case name
   --> src/dft.rs:952:17
    |
952 |         let mut rand_C_polys: Vec<DensePolynomial<E::Fr>> = Vec::new();
    |                 ^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `rand_c_polys`

warning: variable `fft_C` should have a snake case name
   --> src/dft.rs:981:17
    |
981 |         let mut fft_C: Vec<E::Fr> = Vec::with_capacity(1usize << 21);
    |                 ^^^^^ help: convert the identifier to snake case (notice the capitalization): `fft_c`

warning: variable `fft_A` should have a snake case name
   --> src/dft.rs:985:17
    |
985 |             let fft_A: Vec<E::Fr> = field_fft_domain(&rand_A_polys[i].coeffs, 21, &input_domain);
    |                 ^^^^^ help: convert the identifier to snake case: `fft_a`

warning: variable `fft_B` should have a snake case name
   --> src/dft.rs:986:17
    |
986 |             let fft_B: Vec<E::Fr> = field_fft_domain(&rand_B_polys[i].coeffs, 21, &input_domain);
    |                 ^^^^^ help: convert the identifier to snake case: `fft_b`

warning: variable `delta_A_poly` should have a snake case name
   --> src/ramlookup/mod.rs:112:5
    |
112 |     delta_A_poly: &DensePolynomial<E::Fr>,
    |     ^^^^^^^^^^^^ help: convert the identifier to snake case: `delta_a_poly`

warning: variable `delta_T_poly` should have a snake case name
   --> src/ramlookup/mod.rs:113:5
    |
113 |     delta_T_poly: &DensePolynomial<E::Fr>,
    |     ^^^^^^^^^^^^ help: convert the identifier to snake case: `delta_t_poly`

warning: variable `dA_poly` should have a snake case name
   --> src/ramlookup/mod.rs:120:9
    |
120 |     let dA_poly:DensePolynomial<E::Fr> = compute_shifted_difference::<E>(&a_poly, k_domain_size);
    |         ^^^^^^^ help: convert the identifier to snake case: `d_a_poly`

warning: variable `dT_poly` should have a snake case name
   --> src/ramlookup/mod.rs:121:9
    |
121 |     let dT_poly: DensePolynomial<E::Fr> = compute_shifted_difference::<E>(&t_poly, k_domain_size);
    |         ^^^^^^^ help: convert the identifier to snake case: `d_t_poly`

warning: variable `dV_poly` should have a snake case name
   --> src/ramlookup/mod.rs:122:9
    |
122 |     let dV_poly: DensePolynomial<E::Fr> = compute_shifted_difference::<E>(&v_poly, k_domain_size);
    |         ^^^^^^^ help: convert the identifier to snake case: `d_v_poly`

warning: variable `dOp_poly` should have a snake case name
   --> src/ramlookup/mod.rs:123:9
    |
123 |     let dOp_poly: DensePolynomial<E::Fr> = compute_shifted_difference::<E>(&op_poly, k_domain_size);
    |         ^^^^^^^^ help: convert the identifier to snake case: `d_op_poly`

warning: variable `dA_dash_poly` should have a snake case name
   --> src/ramlookup/mod.rs:126:9
    |
126 |     let dA_dash_poly:DensePolynomial<E::Fr> = dA_poly.sub(delta_A_poly);
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `d_a_dash_poly`

warning: variable `dT_dash_poly` should have a snake case name
   --> src/ramlookup/mod.rs:131:9
    |
131 |     let dT_dash_poly: DensePolynomial<E::Fr> = dT_poly.sub(delta_T_poly);
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `d_t_dash_poly`

warning: variable `op_dV_poly` should have a snake case name
   --> src/ramlookup/mod.rs:135:9
    |
135 |     let op_dV_poly: DensePolynomial<E::Fr> = &op_dash_poly * &dV_poly;
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `op_d_v_poly`

warning: variable `op_dV_poly` should have a snake case name
   --> src/ramlookup/mod.rs:136:9
    |
136 |     let op_dV_poly = compute_scaled_polynomial::<E>(&op_dV_poly, gamma_sq);
    |         ^^^^^^^^^^ help: convert the identifier to snake case: `op_d_v_poly`

warning: variable `N_inv` should have a snake case name
   --> src/ramlookup/caulkplus.rs:447:13
    |
447 |         let N_inv = E::Fr::from(h_domain.size() as u128).inverse().unwrap();
    |             ^^^^^ help: convert the identifier to snake case: `n_inv`

warning: variable `N_inv` should have a snake case name
   --> src/ramlookup/caulkplus.rs:517:13
    |
517 |         let N_inv = E::Fr::from(h_domain.size() as u128).inverse().unwrap();
    |             ^^^^^ help: convert the identifier to snake case: `n_inv`

warning: variable `N` should have a snake case name
   --> src/ramlookup/caulkplus.rs:551:9
    |
551 |     let N: usize = t_vec.len();
    |         ^ help: convert the identifier to snake case: `n`

warning: constant `h_domain_size` should have an upper case name
   --> src/ramlookup/caulkplus.rs:703:11
    |
703 |     const h_domain_size: usize = 22;
    |           ^^^^^^^^^^^^^ help: convert the identifier to upper case: `H_DOMAIN_SIZE`
    |
    = note: `#[warn(non_upper_case_globals)]` on by default

warning: constant `m_domain_size` should have an upper case name
   --> src/ramlookup/caulkplus.rs:704:11
    |
704 |     const m_domain_size: usize = 11;
    |           ^^^^^^^^^^^^^ help: convert the identifier to upper case: `M_DOMAIN_SIZE`

warning: variable `N` should have a snake case name
   --> src/ramlookup/caulkplus.rs:733:13
    |
733 |         let N: usize = 1 << h_domain_size;
    |             ^ help: convert the identifier to snake case: `n`

warning: variable `N` should have a snake case name
   --> src/ramlookup/caulkplus.rs:788:13
    |
788 |         let N: usize = 1 << h_domain_size;
    |             ^ help: convert the identifier to snake case: `n`

warning: variable `N` should have a snake case name
   --> src/ramlookup/caulkplus.rs:827:13
    |
827 |         let N: usize = 1 << h_domain_size;
    |             ^ help: convert the identifier to snake case: `n`

warning: variable `N` should have a snake case name
   --> src/ramlookup/caulkplus.rs:868:13
    |
868 |         let N: usize = 1 << h_domain_size;
    |             ^ help: convert the identifier to snake case: `n`

warning: variable `N_inv` should have a snake case name
   --> src/ramlookup/caulkplus.rs:895:17
    |
895 |             let N_inv = E::Fr::from(N as u128).inverse().unwrap();
    |                 ^^^^^ help: convert the identifier to snake case: `n_inv`

warning: variable `N` should have a snake case name
  --> src/ramlookup/fastupdate.rs:66:13
   |
66 |         let N = 1usize << h_domain_size;
   |             ^ help: convert the identifier to snake case: `n`

warning: variable `field_N` should have a snake case name
  --> src/ramlookup/fastupdate.rs:67:13
   |
67 |         let field_N = F::from(N as u128);
   |             ^^^^^^^ help: convert the identifier to snake case: `field_n`

warning: variable `field_N1` should have a snake case name
  --> src/ramlookup/fastupdate.rs:68:13
   |
68 |         let field_N1 = F::from( ((N*(N-1))/2) as u128);
   |             ^^^^^^^^ help: convert the identifier to snake case: `field_n1`

warning: variable `z_I` should have a snake case name
   --> src/ramlookup/fastupdate.rs:194:9
    |
194 |     let z_I = compute_vanishing_poly::<F>(&h_i_vec, 1);
    |         ^^^ help: convert the identifier to snake case (notice the capitalization): `z_i`

warning: variable `z_I_dvt_evals_I` should have a snake case name
   --> src/ramlookup/fastupdate.rs:201:9
    |
201 |     let z_I_dvt_evals_I = fast_poly_evaluate(zi_dvt_coeffs.as_slice(), &h_i_vec);
    |         ^^^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `z_i_dvt_evals_i`

warning: variable `z_I_evals_K` should have a snake case name
   --> src/ramlookup/fastupdate.rs:205:9
    |
205 |     let z_I_evals_K = fast_poly_evaluate_with_pp(
    |         ^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `z_i_evals_k`

warning: variable `c_evals_K` should have a snake case name
   --> src/ramlookup/fastupdate.rs:232:9
    |
232 |     let c_evals_K = fast_poly_evaluate_with_pp(
    |         ^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `c_evals_k`

warning: variable `N` should have a snake case name
   --> src/ramlookup/fastupdate.rs:269:9
    |
269 |     let N = domain.size();
    |         ^ help: convert the identifier to snake case: `n`

warning: variable `q_evals_K` should have a snake case name
   --> src/ramlookup/fastupdate.rs:284:13
    |
284 |     let mut q_evals_K: Vec<F> = Vec::new();
    |             ^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `q_evals_k`

warning: variable `q_dvt_evals_K` should have a snake case name
   --> src/ramlookup/fastupdate.rs:314:9
    |
314 |     let q_dvt_evals_K = fast_poly_evaluate(q_poly_dvt_coeffs.as_slice(), h_i_vec.as_slice());
    |         ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `q_dvt_evals_k`

warning: variable `p_dvt_evals_I` should have a snake case name
   --> src/ramlookup/fastupdate.rs:318:13
    |
318 |     let mut p_dvt_evals_I: Vec<F> = Vec::new();
    |             ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `p_dvt_evals_i`

warning: variable `fN` should have a snake case name
   --> src/ramlookup/fastupdate.rs:325:9
    |
325 |     let fN = F::from(N as u128);
    |         ^^ help: convert the identifier to snake case: `f_n`

warning: variable `fN1` should have a snake case name
   --> src/ramlookup/fastupdate.rs:326:9
    |
326 |     let fN1 = F::from((N-1) as u128).div(F::from(2u128));
    |         ^^^ help: convert the identifier to snake case: `f_n1`

warning: variable `e_evals_I` should have a snake case name
   --> src/ramlookup/fastupdate.rs:327:13
    |
327 |     let mut e_evals_I: Vec<F> = Vec::new();
    |             ^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `e_evals_i`

warning: variable `e_evals_I` should have a snake case name
   --> src/ramlookup/fastupdate.rs:358:13
    |
358 |     let mut e_evals_I: Vec<F> = Vec::new();
    |             ^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `e_evals_i`

warning: variable `evals_I` should have a snake case name
   --> src/ramlookup/fastupdate.rs:464:13
    |
464 |         let evals_I = compute_reciprocal_sum(&t_j_vec, &k_set, &i_set, &h_domain, h_domain_size, &mut cache);
    |             ^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `evals_i`

warning: variable `evals_I_naive` should have a snake case name
   --> src/ramlookup/fastupdate.rs:468:13
    |
468 |         let evals_I_naive = compute_reciprocal_sum_naive(&t_j_vec, &k_set, &i_set, &h_domain, h_domain_size);
    |             ^^^^^^^^^^^^^ help: convert the identifier to snake case (notice the capitalization): `evals_i_naive`

warning: variable `N` should have a snake case name
   --> src/ramlookup/cq.rs:671:9
    |
671 |     let N: usize = 1usize << h_domain_size;
    |         ^ help: convert the identifier to snake case: `n`

warning: structure field `sparse_A_vec` should have a snake case name
   --> src/ramlookup/cq.rs:748:9
    |
748 |     pub sparse_A_vec: Vec<(usize, E::Fr)>, // sparse A polynomial
    |         ^^^^^^^^^^^^ help: convert the identifier to snake case: `sparse_a_vec`

warning: variable `N` should have a snake case name
   --> src/ramlookup/cq.rs:781:9
    |
781 |     let N = domain.size();
    |         ^ help: convert the identifier to snake case: `n`

warning: variable `N` should have a snake case name
   --> src/ramlookup/cq.rs:865:9
    |
865 |     let N = h_domain.size();
    |         ^ help: convert the identifier to snake case: `n`

warning: variable `N_inv` should have a snake case name
    --> src/ramlookup/cq.rs:1299:21
     |
1299 |                 let N_inv = E::Fr::from(h_domain.size() as u128).inverse().unwrap();
     |                     ^^^^^ help: convert the identifier to snake case: `n_inv`

warning: variable `N_inv` should have a snake case name
    --> src/ramlookup/cq.rs:1375:13
     |
1375 |         let N_inv = E::Fr::from(h_domain.size() as u128).inverse().unwrap();
     |             ^^^^^ help: convert the identifier to snake case: `n_inv`

warning: variable `N` should have a snake case name
    --> src/ramlookup/cq.rs:1412:9
     |
1412 |     let N: usize = t_vec.len();
     |         ^ help: convert the identifier to snake case: `n`

warning: variable `N` should have a snake case name
    --> src/ramlookup/cq.rs:1469:22
     |
1469 | fn load_table_or_new(N: &usize, h_domain_size: &usize, path: &str) -> Vec<usize> {
     |                      ^ help: convert the identifier to snake case: `n`

warning: call to `.clone()` on a reference in this situation does nothing
    --> src/ramlookup/cq.rs:1471:30
     |
1471 |     let res = File::open(path.clone());
     |                              ^^^^^^^^ help: remove this redundant call
     |
     = note: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed
     = note: `#[warn(noop_method_call)]` on by default

warning: constant `h_domain_size` should have an upper case name
    --> src/ramlookup/cq.rs:1518:11
     |
1518 |     const h_domain_size: usize = 18;
     |           ^^^^^^^^^^^^^ help: convert the identifier to upper case: `H_DOMAIN_SIZE`

warning: constant `m_domain_size` should have an upper case name
    --> src/ramlookup/cq.rs:1519:11
     |
1519 |     const m_domain_size: usize = 10;
     |           ^^^^^^^^^^^^^ help: convert the identifier to upper case: `M_DOMAIN_SIZE`

warning: constant `k_domain_size` should have an upper case name
    --> src/ramlookup/cq.rs:1520:11
     |
1520 |     const k_domain_size: usize = 0;
     |           ^^^^^^^^^^^^^ help: convert the identifier to upper case: `K_DOMAIN_SIZE`

warning: variable `N` should have a snake case name
    --> src/ramlookup/cq.rs:1550:13
     |
1550 |         let N: usize = 1usize << h;
     |             ^ help: convert the identifier to snake case: `n`

warning: variable `N` should have a snake case name
    --> src/ramlookup/cq.rs:1583:17
     |
1583 |             let N = 1usize << h_domain_sizes[i];
     |                 ^ help: convert the identifier to snake case: `n`

warning: variable `N` should have a snake case name
    --> src/ramlookup/cq.rs:1641:17
     |
1641 |             let N: usize = 1usize << h_domain_sizes[i];
     |                 ^ help: convert the identifier to snake case: `n`

warning: variable `N` should have a snake case name
    --> src/ramlookup/cq.rs:1972:13
     |
1972 |         let N: usize = 1usize << _h_domain_size;
     |             ^ help: convert the identifier to snake case: `n`

warning: variable `K` should have a snake case name
    --> src/ramlookup/cq.rs:2063:21
     |
2063 |             let mut K = 1usize << log_k;
     |                     ^ help: convert the identifier to snake case (notice the capitalization): `k`

warning: variable `N` should have a snake case name
    --> src/ramlookup/cq.rs:2138:13
     |
2138 |         let N = 1usize << h_domain_size;
     |             ^ help: convert the identifier to snake case: `n`

warning: variable `N` should have a snake case name
    --> src/ramlookup/cq.rs:2192:13
     |
2192 |         let N: usize = 1 << h_domain_size;
     |             ^ help: convert the identifier to snake case: `n`

warning: variable `N_inv` should have a snake case name
    --> src/ramlookup/cq.rs:2234:17
     |
2234 |             let N_inv = E::Fr::from(N as u128).inverse().unwrap();
     |                 ^^^^^ help: convert the identifier to snake case: `n_inv`

warning: variable `N` should have a snake case name
    --> src/ramlookup/cq.rs:2249:13
     |
2249 |         let N: usize = 1 << h_domain_size;
     |             ^ help: convert the identifier to snake case: `n`

warning: variable `N` should have a snake case name
    --> src/ramlookup/mod.rs:1132:13
     |
1132 |         let N: usize = 1 << h_domain_size;
     |             ^ help: convert the identifier to snake case: `n`

warning: `caulk` (lib test) generated 230 warnings (run `cargo fix --lib -p caulk --tests` to apply 71 suggestions)
    Finished `release` profile [optimized] target(s) in 7.62s
     Running unittests src/lib.rs (target/release/deps/caulk-5761a1506561317d)

running 1 test
Running setup for table size 1048576 and batch size 1024
test ramlookup::cq::tests::test_delta_lookup has been running for over 60 seconds
time to setup powers = 91.293709092s
dummy pp setup takes 93 seconds
dummy table init takes 0 seconds
Time to generate example for delta = 0 is 0 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=1048576 and batch=1024 and delta=0: 0.023429026 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=1048576 and batch=1024 is 0.023429026 secs
Time to generate example for delta = 1024 is 0 secs
Time to commit t_com (excluded from lookup time) in 25ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 201 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 382 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 53 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 53 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 106 msec
Time for divisions = 0
Evaluating C(X) over K took 112 msec
Scalar computation took 1037 msec
MSM took 48 msecs
Proof Generation Time for table=1048576 and batch=1024 and delta=1024: 1.295395187 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=1048576 and batch=1024 is 0.6594121065 secs
Time to generate example for delta = 2048 is 0 secs
Time to commit t_com (excluded from lookup time) in 47ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 199 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 718 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 53 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 153 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 102 msec
Time for divisions = 0
Evaluating C(X) over K took 262 msec
Scalar computation took 1694 msec
MSM took 68 msecs
Proof Generation Time for table=1048576 and batch=1024 and delta=2048: 1.9761280879999998 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=1048576 and batch=1024 is 1.232678484625 secs
Time to generate example for delta = 4096 is 0 secs
Time to commit t_com (excluded from lookup time) in 89ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 202 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1497 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 351 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 106 msec
Time for divisions = 0
Evaluating C(X) over K took 570 msec
Scalar computation took 3141 msec
MSM took 124 msecs
Proof Generation Time for table=1048576 and batch=1024 and delta=4096: 3.48482315 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=1048576 and batch=1024 is 2.0758704931875 secs
Time to generate example for delta = 8192 is 0 secs
Time to commit t_com (excluded from lookup time) in 150ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 206 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3150 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 732 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 106 msec
Time for divisions = 1
Evaluating C(X) over K took 1148 msec
Scalar computation took 6055 msec
MSM took 223 msecs
Proof Generation Time for table=1048576 and batch=1024 and delta=8192: 6.508652781 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=1048576 and batch=1024 is 3.6307989053125 secs
Time to generate example for delta = 16384 is 0 secs
Time to commit t_com (excluded from lookup time) in 251ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 203 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 6823 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 53 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1557 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 112 msec
Time for divisions = 2
Evaluating C(X) over K took 2394 msec
Scalar computation took 12438 msec
MSM took 419 msecs
Proof Generation Time for table=1048576 and batch=1024 and delta=16384: 13.104339312 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=1048576 and batch=1024 is 6.821705077953125 secs
Time to generate example for delta = 32768 is 0 secs
Time to commit t_com (excluded from lookup time) in 513ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 213 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 15146 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 55 msec
Time for divisions = 3
Evaluating Z_I(X) over K took 3251 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 120 msec
Time for divisions = 4
Evaluating C(X) over K took 4979 msec
Scalar computation took 26382 msec
MSM took 666 msecs
Proof Generation Time for table=1048576 and batch=1024 and delta=32768: 27.338573323 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=1048576 and batch=1024 is 13.632785650937498 secs
Time to generate example for delta = 65536 is 0 secs
Time to commit t_com (excluded from lookup time) in 889ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 215 msec
Time for divisions = 16
Computed update params in 21 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 5 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 33527 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 6
Evaluating Z_I(X) over K took 6326 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 122 msec
Time for divisions = 9
Evaluating C(X) over K took 9741 msec
Scalar computation took 54946 msec
MSM took 1258 msecs
Proof Generation Time for table=1048576 and batch=1024 and delta=65536: 56.557923176 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=1048576 and batch=1024 is 27.904655035582028 secs
Time to generate example for delta = 131072 is 0 secs
Time to commit t_com (excluded from lookup time) in 1564ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 213 msec
Time for divisions = 37
Computed update params in 47 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 12 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 73085 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 12
Evaluating Z_I(X) over K took 12826 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 125 msec
Time for divisions = 19
Evaluating C(X) over K took 19388 msec
Scalar computation took 115684 msec
MSM took 2217 msecs
Proof Generation Time for table=1048576 and batch=1024 and delta=131072: 118.386034613 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=1048576 and batch=1024 is 57.80907499519141 secs
Time to generate example for delta = 262144 is 0 secs
Time to commit t_com (excluded from lookup time) in 3137ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 220 msec
Time for divisions = 84
Computed update params in 106 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 14 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 163090 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 25
Evaluating Z_I(X) over K took 25234 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 122 msec
Time for divisions = 39
Evaluating C(X) over K took 39406 msec
Scalar computation took 248233 msec
MSM took 3801 msecs
Proof Generation Time for table=1048576 and batch=1024 and delta=262144: 252.781411222 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=1048576 and batch=1024 is 121.82764444131541 secs
Time to generate example for delta = 524288 is 1 secs
Time to commit t_com (excluded from lookup time) in 6462ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 222 msec
Time for divisions = 186
Computed update params in 233 secs
Time for sub-products = 0
Time for divisions = 20
Computed oracles on set I in 24 secs
Interpolated q polynomial in 58 secs
Time for sub-products = 0
Time for divisions = 25
Evaluated q_dvt on I in 25 secs
Computing a_vec over K took 345163 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 51
Evaluating Z_I(X) over K took 51164 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 148 msec
Time for divisions = 77
Evaluating C(X) over K took 78047 msec
Scalar computation took 514629 msec
MSM took 7499 msecs
Proof Generation Time for table=1048576 and batch=1024 and delta=524288: 523.404609795 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=1048576 and batch=1024 is 255.0924677085859 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=1048576 and batch=1024 is 255.0924677085859 secs
Running setup for table size 1048576 and batch size 256
time to setup powers = 90.122471272s
dummy pp setup takes 91 seconds
dummy table init takes 0 seconds
Time to generate example for delta = 0 is 0 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=1048576 and batch=256 and delta=0: 0.01129866 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=1048576 and batch=256 is 0.01129866 secs
Time to generate example for delta = 256 is 0 secs
Time to commit t_com (excluded from lookup time) in 10ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 34 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 67 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 4 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 5 msec
Scalar computation took 151 msec
MSM took 15 msecs
Proof Generation Time for table=1048576 and batch=256 and delta=256: 0.17911233 secs
===> Average (finish at delta=256) lookup time (without table init time) for table=1048576 and batch=256 is 0.09520549499999999 secs
Time to generate example for delta = 512 is 0 secs
Time to commit t_com (excluded from lookup time) in 17ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 35 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 144 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 12 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 0
Evaluating C(X) over K took 14 msec
Scalar computation took 254 msec
MSM took 27 msecs
Proof Generation Time for table=1048576 and batch=256 and delta=512: 0.366844473 secs
===> Average (finish at delta=512) lookup time (without table init time) for table=1048576 and batch=256 is 0.20755846612499998 secs
Time to generate example for delta = 1024 is 0 secs
Time to commit t_com (excluded from lookup time) in 27ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 34 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 300 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 28 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 30 msec
Scalar computation took 455 msec
MSM took 49 msecs
Proof Generation Time for table=1048576 and batch=256 and delta=1024: 0.520363511 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=1048576 and batch=256 is 0.3351761689375 secs
Time to generate example for delta = 2048 is 0 secs
Time to commit t_com (excluded from lookup time) in 45ms
Committed f_com in 11ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 35 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 652 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 61 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 0
Evaluating C(X) over K took 64 msec
Scalar computation took 906 msec
MSM took 69 msecs
Proof Generation Time for table=1048576 and batch=256 and delta=2048: 1.060534609 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=1048576 and batch=256 is 0.57969296128125 secs
Time to generate example for delta = 4096 is 0 secs
Time to commit t_com (excluded from lookup time) in 86ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 32 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1412 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 125 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 127 msec
Scalar computation took 1850 msec
MSM took 128 msecs
Proof Generation Time for table=1048576 and batch=256 and delta=4096: 1.9972654909999998 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=1048576 and batch=256 is 1.0689329256718751 secs
Time to generate example for delta = 8192 is 0 secs
Time to commit t_com (excluded from lookup time) in 150ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 34 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3049 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 244 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 245 msec
Scalar computation took 3833 msec
MSM took 223 msecs
Proof Generation Time for table=1048576 and batch=256 and delta=8192: 4.154770296 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=1048576 and batch=256 is 2.089330915875 secs
Time to generate example for delta = 16384 is 0 secs
Time to commit t_com (excluded from lookup time) in 275ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 35 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 6988 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 506 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 0
Evaluating C(X) over K took 505 msec
Scalar computation took 8535 msec
MSM took 418 msecs
Proof Generation Time for table=1048576 and batch=256 and delta=16384: 9.071314243 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=1048576 and batch=256 is 4.370391842480469 secs
Time to generate example for delta = 32768 is 0 secs
Time to commit t_com (excluded from lookup time) in 513ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 35 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 15188 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1012 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 1
Evaluating C(X) over K took 1012 msec
Scalar computation took 18212 msec
MSM took 649 msecs
Proof Generation Time for table=1048576 and batch=256 and delta=32768: 19.00986548 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=1048576 and batch=256 is 9.224902084874998 secs
Time to generate example for delta = 65536 is 0 secs
Time to commit t_com (excluded from lookup time) in 869ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 37 msec
Time for divisions = 16
Computed update params in 20 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 5 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 32940 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1982 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 21 msec
Time for divisions = 2
Evaluating C(X) over K took 2014 msec
Scalar computation took 38849 msec
MSM took 1266 msecs
Proof Generation Time for table=1048576 and batch=256 and delta=65536: 40.331766693 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=1048576 and batch=256 is 19.468681254840817 secs
Time to generate example for delta = 131072 is 0 secs
Time to commit t_com (excluded from lookup time) in 1628ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 38 msec
Time for divisions = 37
Computed update params in 47 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 12 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 73825 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 4
Evaluating Z_I(X) over K took 4073 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 21 msec
Time for divisions = 4
Evaluating C(X) over K took 4068 msec
Scalar computation took 85769 msec
MSM took 2279 msecs
Proof Generation Time for table=1048576 and batch=256 and delta=131072: 88.381314135 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=1048576 and batch=256 is 41.93607252750732 secs
Time to generate example for delta = 262144 is 0 secs
Time to commit t_com (excluded from lookup time) in 3098ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 37 msec
Time for divisions = 83
Computed update params in 105 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 14 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 161358 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 8
Evaluating Z_I(X) over K took 8142 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 24 msec
Time for divisions = 8
Evaluating C(X) over K took 8067 msec
Scalar computation took 185135 msec
MSM took 3760 msecs
Proof Generation Time for table=1048576 and batch=256 and delta=262144: 189.482015533 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=1048576 and batch=256 is 90.45855146918092 secs
Time to generate example for delta = 524288 is 1 secs
Time to commit t_com (excluded from lookup time) in 6361ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 39 msec
Time for divisions = 187
Computed update params in 234 secs
Time for sub-products = 0
Time for divisions = 20
Computed oracles on set I in 23 secs
Interpolated q polynomial in 59 secs
Time for sub-products = 0
Time for divisions = 24
Evaluated q_dvt on I in 24 secs
Computing a_vec over K took 345888 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 16
Evaluating Z_I(X) over K took 16220 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 24 msec
Time for divisions = 15
Evaluating C(X) over K took 16063 msec
Scalar computation took 393060 msec
MSM took 7487 msecs
Proof Generation Time for table=1048576 and batch=256 and delta=524288: 401.648567186 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=1048576 and batch=256 is 193.03782065160274 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=1048576 and batch=256 is 193.03782065160274 secs
Running setup for table size 1048576 and batch size 64
time to setup powers = 90.851234414s
dummy pp setup takes 92 seconds
dummy table init takes 0 seconds
Time to generate example for delta = 0 is 0 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=1048576 and batch=64 and delta=0: 0.006882903 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=1048576 and batch=64 is 0.006882903 secs
Time to generate example for delta = 64 is 0 secs
Time to commit t_com (excluded from lookup time) in 4ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 13 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 12 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 0 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 0 msec
Scalar computation took 34 msec
MSM took 6 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=64: 0.048073951 secs
===> Average (finish at delta=64) lookup time (without table init time) for table=1048576 and batch=64 is 0.027478427 secs
Time to generate example for delta = 128 is 0 secs
Time to commit t_com (excluded from lookup time) in 5ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 22 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 1 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 1 msec
Scalar computation took 40 msec
MSM took 11 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=128: 0.059164126 secs
===> Average (finish at delta=128) lookup time (without table init time) for table=1048576 and batch=64 is 0.041935004624999994 secs
Time to generate example for delta = 256 is 0 secs
Time to commit t_com (excluded from lookup time) in 10ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 47 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 3 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 3 msec
Scalar computation took 72 msec
MSM took 15 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=256: 0.094692005 secs
===> Average (finish at delta=256) lookup time (without table init time) for table=1048576 and batch=64 is 0.061652027499999984 secs
Time to generate example for delta = 512 is 0 secs
Time to commit t_com (excluded from lookup time) in 17ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 124 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 8 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 8 msec
Scalar computation took 162 msec
MSM took 27 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=512: 0.197650545 secs
===> Average (finish at delta=512) lookup time (without table init time) for table=1048576 and batch=64 is 0.107129105625 secs
Time to generate example for delta = 1024 is 0 secs
Time to commit t_com (excluded from lookup time) in 25ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 269 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 16 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 16 msec
Scalar computation took 332 msec
MSM took 48 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=1024: 0.389419107 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=1048576 and batch=64 is 0.20332834959375 secs
Time to generate example for delta = 2048 is 0 secs
Time to commit t_com (excluded from lookup time) in 47ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 620 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 34 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 34 msec
Scalar computation took 735 msec
MSM took 67 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=2048: 0.813737772 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=1048576 and batch=64 is 0.4057683841171875 secs
Time to generate example for delta = 4096 is 0 secs
Time to commit t_com (excluded from lookup time) in 86ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1350 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 67 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 66 msec
Scalar computation took 1563 msec
MSM took 121 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=4096: 1.6988512070000001 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=1048576 and batch=64 is 0.8344889111640624 secs
Time to generate example for delta = 8192 is 0 secs
Time to commit t_com (excluded from lookup time) in 148ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3140 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 145 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 0
Evaluating C(X) over K took 144 msec
Scalar computation took 3582 msec
MSM took 235 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=8192: 3.872232509 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=1048576 and batch=64 is 1.8142602699375003 secs
Time to generate example for delta = 16384 is 0 secs
Time to commit t_com (excluded from lookup time) in 267ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 6893 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 270 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 267 msec
Scalar computation took 7712 msec
MSM took 409 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=16384: 8.189022301 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=1048576 and batch=64 is 3.9266594525 secs
Time to generate example for delta = 32768 is 0 secs
Time to commit t_com (excluded from lookup time) in 501ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 14804 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 560 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 0
Evaluating C(X) over K took 565 msec
Scalar computation took 16507 msec
MSM took 660 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=32768: 17.268625515 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=1048576 and batch=64 is 8.332175080256839 secs
Time to generate example for delta = 65536 is 0 secs
Time to commit t_com (excluded from lookup time) in 895ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 16
Computed update params in 21 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 5 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 33454 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1095 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 1
Evaluating C(X) over K took 1095 msec
Scalar computation took 36737 msec
MSM took 1200 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=65536: 38.09766807 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=1048576 and batch=64 is 18.01274615184595 secs
Time to generate example for delta = 131072 is 0 secs
Time to commit t_com (excluded from lookup time) in 1533ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 37
Computed update params in 47 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 12 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 73810 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 2
Evaluating Z_I(X) over K took 2226 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 2
Evaluating C(X) over K took 2196 msec
Scalar computation took 80407 msec
MSM took 2281 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=131072: 82.972172728 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=1048576 and batch=64 is 39.27931112022987 secs
Time to generate example for delta = 262144 is 0 secs
Time to commit t_com (excluded from lookup time) in 3099ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 84
Computed update params in 106 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 14 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 161989 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 4
Evaluating Z_I(X) over K took 4583 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 4
Evaluating C(X) over K took 4497 msec
Scalar computation took 175358 msec
MSM took 3893 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=262144: 179.810164406 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=1048576 and batch=64 is 85.34115036556796 secs
Time to generate example for delta = 524288 is 1 secs
Time to commit t_com (excluded from lookup time) in 6224ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 186
Computed update params in 234 secs
Time for sub-products = 0
Time for divisions = 20
Computed oracles on set I in 23 secs
Interpolated q polynomial in 58 secs
Time for sub-products = 0
Time for divisions = 24
Evaluated q_dvt on I in 24 secs
Computing a_vec over K took 344522 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 8
Evaluating Z_I(X) over K took 8861 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 5 msec
Time for divisions = 8
Evaluating C(X) over K took 8930 msec
Scalar computation took 371098 msec
MSM took 7485 msecs
Proof Generation Time for table=1048576 and batch=64 and delta=524288: 379.616807591 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=1048576 and batch=64 is 182.53341579687725 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=1048576 and batch=64 is 182.53341579687725 secs
Running setup for table size 2097152 and batch size 1024
time to setup powers = 166.133000911s
dummy pp setup takes 174 seconds
dummy table init takes 1 seconds
Time to generate example for delta = 0 is 1 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=2097152 and batch=1024 and delta=0: 0.023069979 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=2097152 and batch=1024 is 0.023069979 secs
Time to generate example for delta = 1024 is 1 secs
Time to commit t_com (excluded from lookup time) in 25ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 200 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 384 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 51 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 101 msec
Time for divisions = 0
Evaluating C(X) over K took 107 msec
Scalar computation took 1021 msec
MSM took 47 msecs
Proof Generation Time for table=2097152 and batch=1024 and delta=1024: 1.275205801 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=2097152 and batch=1024 is 0.64913789 secs
Time to generate example for delta = 2048 is 1 secs
Time to commit t_com (excluded from lookup time) in 45ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 194 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 705 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 149 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 99 msec
Time for divisions = 0
Evaluating C(X) over K took 254 msec
Scalar computation took 1655 msec
MSM took 66 msecs
Proof Generation Time for table=2097152 and batch=1024 and delta=2048: 1.922810793 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=2097152 and batch=1024 is 1.2050237175 secs
Time to generate example for delta = 4096 is 1 secs
Time to commit t_com (excluded from lookup time) in 86ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 197 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1456 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 344 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 102 msec
Time for divisions = 0
Evaluating C(X) over K took 552 msec
Scalar computation took 3058 msec
MSM took 121 msecs
Proof Generation Time for table=2097152 and batch=1024 and delta=4096: 3.390884651 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=2097152 and batch=1024 is 2.0226903358749997 secs
Time to generate example for delta = 8192 is 1 secs
Time to commit t_com (excluded from lookup time) in 154ms
Committed f_com in 34ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 211 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3152 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 733 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 105 msec
Time for divisions = 1
Evaluating C(X) over K took 1149 msec
Scalar computation took 6067 msec
MSM took 224 msecs
Proof Generation Time for table=2097152 and batch=1024 and delta=8192: 6.522739119 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=2097152 and batch=1024 is 3.5876215625624996 secs
Time to generate example for delta = 16384 is 1 secs
Time to commit t_com (excluded from lookup time) in 251ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 202 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 6924 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1542 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 108 msec
Time for divisions = 2
Evaluating C(X) over K took 2377 msec
Scalar computation took 12482 msec
MSM took 408 msecs
Proof Generation Time for table=2097152 and batch=1024 and delta=16384: 13.133649113 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=2097152 and batch=1024 is 6.8112033079375 secs
Time to generate example for delta = 32768 is 1 secs
Time to commit t_com (excluded from lookup time) in 498ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 203 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 15093 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 3
Evaluating Z_I(X) over K took 3071 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 112 msec
Time for divisions = 4
Evaluating C(X) over K took 4713 msec
Scalar computation took 25747 msec
MSM took 631 msecs
Proof Generation Time for table=2097152 and batch=1024 and delta=32768: 26.656550549 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=2097152 and batch=1024 is 13.4587992369375 secs
Time to generate example for delta = 65536 is 1 secs
Time to commit t_com (excluded from lookup time) in 844ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 208 msec
Time for divisions = 16
Computed update params in 20 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 5 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 33159 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 55 msec
Time for divisions = 6
Evaluating Z_I(X) over K took 6519 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 119 msec
Time for divisions = 9
Evaluating C(X) over K took 9886 msec
Scalar computation took 54906 msec
MSM took 1202 msecs
Proof Generation Time for table=2097152 and batch=1024 and delta=65536: 56.452471877 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=2097152 and batch=1024 is 27.62304554265625 secs
Time to generate example for delta = 131072 is 1 secs
Time to commit t_com (excluded from lookup time) in 1581ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 214 msec
Time for divisions = 37
Computed update params in 47 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 12 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 73500 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 12
Evaluating Z_I(X) over K took 12664 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 120 msec
Time for divisions = 19
Evaluating C(X) over K took 19326 msec
Scalar computation took 115728 msec
MSM took 2277 msecs
Proof Generation Time for table=2097152 and batch=1024 and delta=131072: 118.489893914 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=2097152 and batch=1024 is 57.66828105899414 secs
Time to generate example for delta = 262144 is 1 secs
Time to commit t_com (excluded from lookup time) in 3092ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 213 msec
Time for divisions = 85
Computed update params in 106 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 14 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 163380 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 55 msec
Time for divisions = 25
Evaluating Z_I(X) over K took 25775 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 125 msec
Time for divisions = 38
Evaluating C(X) over K took 38809 msec
Scalar computation took 248561 msec
MSM took 3780 msecs
Proof Generation Time for table=2097152 and batch=1024 and delta=262144: 253.097749924 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=2097152 and batch=1024 is 121.86250447338183 secs
Time to generate example for delta = 524288 is 1 secs
Time to commit t_com (excluded from lookup time) in 6261ms
Committed f_com in 34ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 230 msec
Time for divisions = 191
Computed update params in 238 secs
Time for sub-products = 0
Time for divisions = 24
Computed oracles on set I in 31 secs
Interpolated q polynomial in 58 secs
Time for sub-products = 0
Time for divisions = 24
Evaluated q_dvt on I in 24 secs
Computing a_vec over K took 359445 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 54 msec
Time for divisions = 51
Evaluating Z_I(X) over K took 51412 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 140 msec
Time for divisions = 78
Evaluating C(X) over K took 78389 msec
Scalar computation took 529947 msec
MSM took 7505 msecs
Proof Generation Time for table=2097152 and batch=1024 and delta=524288: 538.795768383 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=2097152 and batch=1024 is 259.0441327990166 secs
Time to generate example for delta = 1048576 is 4 secs
Time to commit t_com (excluded from lookup time) in 11890ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 241 msec
Time for divisions = 422
Computed update params in 525 secs
Time for sub-products = 0
Time for divisions = 43
Computed oracles on set I in 50 secs
Interpolated q polynomial in 126 secs
Time for sub-products = 0
Time for divisions = 52
Evaluated q_dvt on I in 52 secs
Computing a_vec over K took 761084 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 101
Evaluating Z_I(X) over K took 102061 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 155 msec
Time for divisions = 155
Evaluating C(X) over K took 155630 msec
Scalar computation took 1098857 msec
MSM took 14666 msecs
Proof Generation Time for table=2097152 and batch=1024 and delta=1048576: 1115.869705697 secs
===> Average (finish at delta=1048576) lookup time (without table init time) for table=2097152 and batch=1024 is 543.3293221112351 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=2097152 and batch=1024 is 543.3293221112351 secs
Running setup for table size 2097152 and batch size 256
time to setup powers = 165.648882412s
dummy pp setup takes 168 seconds
dummy table init takes 1 seconds
Time to generate example for delta = 0 is 1 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=2097152 and batch=256 and delta=0: 0.012298774 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=2097152 and batch=256 is 0.012298774 secs
Time to generate example for delta = 256 is 1 secs
Time to commit t_com (excluded from lookup time) in 10ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 103 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 65 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 3 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 5 msec
Scalar computation took 217 msec
MSM took 15 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=256: 0.243693654 secs
===> Average (finish at delta=256) lookup time (without table init time) for table=2097152 and batch=256 is 0.127996214 secs
Time to generate example for delta = 512 is 1 secs
Time to commit t_com (excluded from lookup time) in 17ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 137 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 12 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 13 msec
Scalar computation took 242 msec
MSM took 27 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=512: 0.28293284 secs
===> Average (finish at delta=512) lookup time (without table init time) for table=2097152 and batch=256 is 0.20055962875 secs
Time to generate example for delta = 1024 is 1 secs
Time to commit t_com (excluded from lookup time) in 26ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 290 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 27 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 29 msec
Scalar computation took 442 msec
MSM took 48 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=1024: 0.504756044 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=2097152 and batch=256 is 0.311065985625 secs
Time to generate example for delta = 2048 is 1 secs
Time to commit t_com (excluded from lookup time) in 45ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 32 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 620 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 58 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 60 msec
Scalar computation took 863 msec
MSM took 66 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=2048: 0.946747703 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=2097152 and batch=256 is 0.53222116890625 secs
Time to generate example for delta = 4096 is 1 secs
Time to commit t_com (excluded from lookup time) in 88ms
Committed f_com in 10ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1371 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 119 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 121 msec
Scalar computation took 1792 msec
MSM took 122 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=4096: 1.996641425 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=2097152 and batch=256 is 1.0183624558593751 secs
Time to generate example for delta = 8192 is 1 secs
Time to commit t_com (excluded from lookup time) in 145ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3117 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 246 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 0
Evaluating C(X) over K took 251 msec
Scalar computation took 3920 msec
MSM took 233 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=8192: 4.248407195 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=2097152 and batch=256 is 2.0880353030078127 secs
Time to generate example for delta = 16384 is 1 secs
Time to commit t_com (excluded from lookup time) in 261ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 35 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 6940 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 494 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 0
Evaluating C(X) over K took 522 msec
Scalar computation took 8503 msec
MSM took 424 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=16384: 9.04435716 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=2097152 and batch=256 is 4.3859429198046875 secs
Time to generate example for delta = 32768 is 1 secs
Time to commit t_com (excluded from lookup time) in 520ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 36 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 15284 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1010 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 20 msec
Time for divisions = 1
Evaluating C(X) over K took 1011 msec
Scalar computation took 18315 msec
MSM took 645 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=32768: 19.112665217 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=2097152 and batch=256 is 9.251891718326174 secs
Time to generate example for delta = 65536 is 1 secs
Time to commit t_com (excluded from lookup time) in 897ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 37 msec
Time for divisions = 16
Computed update params in 21 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 6 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 33601 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 2
Evaluating Z_I(X) over K took 2091 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 21 msec
Time for divisions = 2
Evaluating C(X) over K took 2024 msec
Scalar computation took 39622 msec
MSM took 1199 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=65536: 41.038936877 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=2097152 and batch=256 is 19.685258757331056 secs
Time to generate example for delta = 131072 is 1 secs
Time to commit t_com (excluded from lookup time) in 1533ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 36 msec
Time for divisions = 37
Computed update params in 47 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 13 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 73317 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 3
Evaluating Z_I(X) over K took 3981 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 21 msec
Time for divisions = 4
Evaluating C(X) over K took 4060 msec
Scalar computation took 85162 msec
MSM took 2258 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=131072: 87.768881703 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=2097152 and batch=256 is 42.067401379537614 secs
Time to generate example for delta = 262144 is 1 secs
Time to commit t_com (excluded from lookup time) in 3273ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 38 msec
Time for divisions = 85
Computed update params in 107 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 14 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 163910 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 8
Evaluating Z_I(X) over K took 8129 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 21 msec
Time for divisions = 8
Evaluating C(X) over K took 8038 msec
Scalar computation took 187652 msec
MSM took 3866 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=262144: 192.140632254 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=2097152 and batch=256 is 91.03656056343067 secs
Time to generate example for delta = 524288 is 1 secs
Time to commit t_com (excluded from lookup time) in 6350ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 37 msec
Time for divisions = 191
Computed update params in 238 secs
Time for sub-products = 0
Time for divisions = 24
Computed oracles on set I in 31 secs
Interpolated q polynomial in 59 secs
Time for sub-products = 0
Time for divisions = 24
Evaluated q_dvt on I in 24 secs
Computing a_vec over K took 359760 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 16
Evaluating Z_I(X) over K took 16172 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 22 msec
Time for divisions = 15
Evaluating C(X) over K took 15960 msec
Scalar computation took 406866 msec
MSM took 7318 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=524288: 415.322718751 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=2097152 and batch=256 is 197.41136194000842 secs
Time to generate example for delta = 1048576 is 4 secs
Time to commit t_com (excluded from lookup time) in 11905ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 38 msec
Time for divisions = 421
Computed update params in 523 secs
Time for sub-products = 0
Time for divisions = 42
Computed oracles on set I in 49 secs
Interpolated q polynomial in 127 secs
Time for sub-products = 0
Time for divisions = 52
Evaluated q_dvt on I in 52 secs
Computing a_vec over K took 759777 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 32
Evaluating Z_I(X) over K took 32510 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 23 msec
Time for divisions = 31
Evaluating C(X) over K took 32171 msec
Scalar computation took 854186 msec
MSM took 14668 msecs
Proof Generation Time for table=2097152 and batch=256 and delta=1048576: 871.073731343 secs
===> Average (finish at delta=1048576) lookup time (without table init time) for table=2097152 and batch=256 is 420.3326103277689 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=2097152 and batch=256 is 420.3326103277689 secs
Running setup for table size 2097152 and batch size 64
time to setup powers = 166.044349276s
dummy pp setup takes 169 seconds
dummy table init takes 1 seconds
Time to generate example for delta = 0 is 1 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=2097152 and batch=64 and delta=0: 0.007024353 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=2097152 and batch=64 is 0.007024353 secs
Time to generate example for delta = 64 is 1 secs
Time to commit t_com (excluded from lookup time) in 4ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 29 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 12 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 0 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 0 msec
Scalar computation took 50 msec
MSM took 6 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=64: 0.064729654 secs
===> Average (finish at delta=64) lookup time (without table init time) for table=2097152 and batch=64 is 0.0358770035 secs
Time to generate example for delta = 128 is 1 secs
Time to commit t_com (excluded from lookup time) in 5ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 21 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 1 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 1 msec
Scalar computation took 39 msec
MSM took 11 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=128: 0.057812095 secs
===> Average (finish at delta=128) lookup time (without table init time) for table=2097152 and batch=64 is 0.047709244125 secs
Time to generate example for delta = 256 is 1 secs
Time to commit t_com (excluded from lookup time) in 9ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 46 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 3 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 3 msec
Scalar computation took 70 msec
MSM took 14 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=256: 0.09204862 secs
===> Average (finish at delta=256) lookup time (without table init time) for table=2097152 and batch=64 is 0.063459583625 secs
Time to generate example for delta = 512 is 1 secs
Time to commit t_com (excluded from lookup time) in 16ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 122 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 7 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 7 msec
Scalar computation took 158 msec
MSM took 26 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=512: 0.192275256 secs
===> Average (finish at delta=512) lookup time (without table init time) for table=2097152 and batch=64 is 0.1059428431875 secs
Time to generate example for delta = 1024 is 1 secs
Time to commit t_com (excluded from lookup time) in 25ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 270 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 16 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 16 msec
Scalar computation took 332 msec
MSM took 47 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=1024: 0.388281216 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=2097152 and batch=64 is 0.20117313271875 secs
Time to generate example for delta = 2048 is 1 secs
Time to commit t_com (excluded from lookup time) in 46ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 604 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 33 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 33 msec
Scalar computation took 717 msec
MSM took 66 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=2048: 0.794663446 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=2097152 and batch=64 is 0.39949759303125 secs
Time to generate example for delta = 4096 is 1 secs
Time to commit t_com (excluded from lookup time) in 87ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1351 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 66 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 67 msec
Scalar computation took 1565 msec
MSM took 121 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=4096: 1.702754237 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=2097152 and batch=64 is 0.8276504469179689 secs
Time to generate example for delta = 8192 is 1 secs
Time to commit t_com (excluded from lookup time) in 145ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3106 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 141 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 140 msec
Scalar computation took 3541 msec
MSM took 237 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=8192: 3.802283377 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=2097152 and batch=64 is 1.7941852698105465 secs
Time to generate example for delta = 16384 is 1 secs
Time to commit t_com (excluded from lookup time) in 253ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 6678 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 272 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 266 msec
Scalar computation took 7498 msec
MSM took 408 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=16384: 7.944573606 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=2097152 and batch=64 is 3.8378520859570306 secs
Time to generate example for delta = 32768 is 1 secs
Time to commit t_com (excluded from lookup time) in 499ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 15120 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 552 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 549 msec
Scalar computation took 16781 msec
MSM took 648 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=32768: 17.530706696 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=2097152 and batch=64 is 8.292426847526364 secs
Time to generate example for delta = 65536 is 1 secs
Time to commit t_com (excluded from lookup time) in 862ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 16
Computed update params in 20 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 5 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 33110 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1084 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 1
Evaluating C(X) over K took 1079 msec
Scalar computation took 36374 msec
MSM took 1230 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=65536: 37.770231363 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=2097152 and batch=64 is 17.97638922871509 secs
Time to generate example for delta = 131072 is 1 secs
Time to commit t_com (excluded from lookup time) in 1575ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 37
Computed update params in 47 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 12 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 73263 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 2
Evaluating Z_I(X) over K took 2161 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 2
Evaluating C(X) over K took 2231 msec
Scalar computation took 79870 msec
MSM took 2278 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=131072: 82.445594966 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=2097152 and batch=64 is 39.04760473220362 secs
Time to generate example for delta = 262144 is 1 secs
Time to commit t_com (excluded from lookup time) in 3162ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 85
Computed update params in 107 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 14 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 162884 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 4
Evaluating Z_I(X) over K took 4328 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 4
Evaluating C(X) over K took 4306 msec
Scalar computation took 175819 msec
MSM took 3826 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=262144: 180.207238011 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=2097152 and batch=64 is 85.1929775075103 secs
Time to generate example for delta = 524288 is 1 secs
Time to commit t_com (excluded from lookup time) in 6447ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 191
Computed update params in 238 secs
Time for sub-products = 0
Time for divisions = 24
Computed oracles on set I in 31 secs
Interpolated q polynomial in 58 secs
Time for sub-products = 0
Time for divisions = 24
Evaluated q_dvt on I in 24 secs
Computing a_vec over K took 359095 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 8
Evaluating Z_I(X) over K took 8674 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 8
Evaluating C(X) over K took 8892 msec
Scalar computation took 385227 msec
MSM took 7308 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=524288: 393.607889685 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=2097152 and batch=64 is 186.05678314881413 secs
Time to generate example for delta = 1048576 is 4 secs
Time to commit t_com (excluded from lookup time) in 11948ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 419
Computed update params in 521 secs
Time for sub-products = 0
Time for divisions = 41
Computed oracles on set I in 48 secs
Interpolated q polynomial in 126 secs
Time for sub-products = 0
Time for divisions = 52
Evaluated q_dvt on I in 52 secs
Computing a_vec over K took 754822 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 17
Evaluating Z_I(X) over K took 17807 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 5 msec
Time for divisions = 17
Evaluating C(X) over K took 17730 msec
Scalar computation took 807807 msec
MSM took 14491 msecs
Proof Generation Time for table=2097152 and batch=64 and delta=1048576: 824.397389831 secs
===> Average (finish at delta=1048576) lookup time (without table init time) for table=2097152 and batch=64 is 397.53628477952014 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=2097152 and batch=64 is 397.53628477952014 secs
Running setup for table size 4194304 and batch size 1024
time to setup powers = 328.621460659s
dummy pp setup takes 341 seconds
dummy table init takes 2 seconds
Time to generate example for delta = 0 is 2 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=4194304 and batch=1024 and delta=0: 0.024100029 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=4194304 and batch=1024 is 0.024100029 secs
Time to generate example for delta = 1024 is 2 secs
Time to commit t_com (excluded from lookup time) in 25ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 203 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 362 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 52 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 98 msec
Time for divisions = 0
Evaluating C(X) over K took 105 msec
Scalar computation took 998 msec
MSM took 47 msecs
Proof Generation Time for table=4194304 and batch=1024 and delta=1024: 1.072738891 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=4194304 and batch=1024 is 0.54841946 secs
Time to generate example for delta = 2048 is 2 secs
Time to commit t_com (excluded from lookup time) in 48ms
Committed f_com in 30ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 204 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 739 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 55 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 157 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 104 msec
Time for divisions = 0
Evaluating C(X) over K took 268 msec
Scalar computation took 1740 msec
MSM took 70 msecs
Proof Generation Time for table=4194304 and batch=1024 and delta=2048: 2.016655359 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=4194304 and batch=1024 is 1.164547851 secs
Time to generate example for delta = 4096 is 2 secs
Time to commit t_com (excluded from lookup time) in 92ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 200 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1507 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 55 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 361 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 98 msec
Time for divisions = 0
Evaluating C(X) over K took 556 msec
Scalar computation took 3150 msec
MSM took 125 msecs
Proof Generation Time for table=4194304 and batch=1024 and delta=4096: 3.310512646 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=4194304 and batch=1024 is 1.9949320071874999 secs
Time to generate example for delta = 8192 is 2 secs
Time to commit t_com (excluded from lookup time) in 145ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 195 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3160 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 734 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 101 msec
Time for divisions = 1
Evaluating C(X) over K took 1159 msec
Scalar computation took 6087 msec
MSM took 223 msecs
Proof Generation Time for table=4194304 and batch=1024 and delta=8192: 6.534007797 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=4194304 and batch=1024 is 3.5593303378125 secs
Time to generate example for delta = 16384 is 2 secs
Time to commit t_com (excluded from lookup time) in 252ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 197 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 6794 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1510 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 102 msec
Time for divisions = 2
Evaluating C(X) over K took 2331 msec
Scalar computation took 12263 msec
MSM took 414 msecs
Proof Generation Time for table=4194304 and batch=1024 and delta=16384: 12.917431211 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=4194304 and batch=1024 is 6.74226591175 secs
Time to generate example for delta = 32768 is 2 secs
Time to commit t_com (excluded from lookup time) in 499ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 200 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 14893 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 3
Evaluating Z_I(X) over K took 3075 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 105 msec
Time for divisions = 4
Evaluating C(X) over K took 4714 msec
Scalar computation took 25608 msec
MSM took 648 msecs
Proof Generation Time for table=4194304 and batch=1024 and delta=32768: 26.537920789 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=4194304 and batch=1024 is 13.341381030703126 secs
Time to generate example for delta = 65536 is 2 secs
Time to commit t_com (excluded from lookup time) in 870ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 211 msec
Time for divisions = 16
Computed update params in 21 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 5 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 33400 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 6
Evaluating Z_I(X) over K took 6302 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 114 msec
Time for divisions = 9
Evaluating C(X) over K took 9735 msec
Scalar computation took 54840 msec
MSM took 1199 msecs
Proof Generation Time for table=4194304 and batch=1024 and delta=65536: 56.393626989 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=4194304 and batch=1024 is 27.52020131219532 secs
Time to generate example for delta = 131072 is 2 secs
Time to commit t_com (excluded from lookup time) in 1574ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 210 msec
Time for divisions = 37
Computed update params in 47 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 12 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 73488 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 12
Evaluating Z_I(X) over K took 12510 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 110 msec
Time for divisions = 19
Evaluating C(X) over K took 19825 msec
Scalar computation took 116087 msec
MSM took 2274 msecs
Proof Generation Time for table=4194304 and batch=1024 and delta=131072: 118.851975608 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=4194304 and batch=1024 is 57.69349026749414 secs
Time to generate example for delta = 262144 is 3 secs
Time to commit t_com (excluded from lookup time) in 3165ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 215 msec
Time for divisions = 84
Computed update params in 106 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 15 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 163162 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 25
Evaluating Z_I(X) over K took 25080 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 115 msec
Time for divisions = 38
Evaluating C(X) over K took 38587 msec
Scalar computation took 246949 msec
MSM took 3770 msecs
Proof Generation Time for table=4194304 and batch=1024 and delta=262144: 251.493408281 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=4194304 and batch=1024 is 121.5626237550918 secs
Time to generate example for delta = 524288 is 3 secs
Time to commit t_com (excluded from lookup time) in 6238ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 214 msec
Time for divisions = 190
Computed update params in 237 secs
Time for sub-products = 0
Time for divisions = 24
Computed oracles on set I in 31 secs
Interpolated q polynomial in 59 secs
Time for sub-products = 0
Time for divisions = 24
Evaluated q_dvt on I in 24 secs
Computing a_vec over K took 358768 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 54 msec
Time for divisions = 50
Evaluating Z_I(X) over K took 50894 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 119 msec
Time for divisions = 77
Evaluating C(X) over K took 77170 msec
Scalar computation took 527441 msec
MSM took 7512 msecs
Proof Generation Time for table=4194304 and batch=1024 and delta=524288: 536.311721776 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=4194304 and batch=1024 is 257.87166583393207 secs
Time to generate example for delta = 1048576 is 3 secs
Time to commit t_com (excluded from lookup time) in 11931ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 216 msec
Time for divisions = 429
Computed update params in 532 secs
Time for sub-products = 0
Time for divisions = 53
Computed oracles on set I in 66 secs
Interpolated q polynomial in 127 secs
Time for sub-products = 0
Time for divisions = 53
Evaluated q_dvt on I in 53 secs
Computing a_vec over K took 791929 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 102
Evaluating Z_I(X) over K took 102580 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 133 msec
Time for divisions = 155
Evaluating C(X) over K took 155667 msec
Scalar computation took 1130364 msec
MSM took 14654 msecs
Proof Generation Time for table=4194304 and batch=1024 and delta=1048576: 1147.512114088 secs
===> Average (finish at delta=1048576) lookup time (without table init time) for table=4194304 and batch=1024 is 550.0410107287455 secs
Time to generate example for delta = 2097152 is 9 secs
Time to commit t_com (excluded from lookup time) in 20048ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 283 msec
Time for divisions = 944
Computed update params in 1166 secs
Time for sub-products = 0
Time for divisions = 91
Computed oracles on set I in 105 secs
Interpolated q polynomial in 270 secs
Time for sub-products = 0
Time for divisions = 111
Evaluated q_dvt on I in 111 secs
Computing a_vec over K took 1665347 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 54 msec
Time for divisions = 205
Evaluating Z_I(X) over K took 206338 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 262 msec
Time for divisions = 311
Evaluating C(X) over K took 312166 msec
Scalar computation took 2343294 msec
MSM took 26902 msecs
Proof Generation Time for table=4194304 and batch=1024 and delta=2097152: 2375.029192624 secs
===> Average (finish at delta=2097152) lookup time (without table init time) for table=4194304 and batch=1024 is 1155.8056754357467 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=4194304 and batch=1024 is 1155.8056754357467 secs
Running setup for table size 4194304 and batch size 256
time to setup powers = 327.753854828s
dummy pp setup takes 334 seconds
dummy table init takes 2 seconds
Time to generate example for delta = 0 is 2 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=4194304 and batch=256 and delta=0: 0.011141741 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=4194304 and batch=256 is 0.011141741 secs
Time to generate example for delta = 256 is 2 secs
Time to commit t_com (excluded from lookup time) in 10ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 34 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 65 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 4 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 5 msec
Scalar computation took 148 msec
MSM took 14 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=256: 0.175247187 secs
===> Average (finish at delta=256) lookup time (without table init time) for table=4194304 and batch=256 is 0.093194464 secs
Time to generate example for delta = 512 is 2 secs
Time to commit t_com (excluded from lookup time) in 16ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 133 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 11 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 13 msec
Scalar computation took 237 msec
MSM took 26 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=512: 0.276229746 secs
===> Average (finish at delta=512) lookup time (without table init time) for table=4194304 and batch=256 is 0.172089285125 secs
Time to generate example for delta = 1024 is 2 secs
Time to commit t_com (excluded from lookup time) in 25ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 282 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 27 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 28 msec
Scalar computation took 432 msec
MSM took 47 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=1024: 0.492859082 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=4194304 and batch=256 is 0.2918561830625 secs
Time to generate example for delta = 2048 is 2 secs
Time to commit t_com (excluded from lookup time) in 45ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 32 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 617 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 57 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 17 msec
Time for divisions = 0
Evaluating C(X) over K took 59 msec
Scalar computation took 855 msec
MSM took 66 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=2048: 0.935553447 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=4194304 and batch=256 is 0.5168654226875 secs
Time to generate example for delta = 4096 is 2 secs
Time to commit t_com (excluded from lookup time) in 86ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1365 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 120 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 17 msec
Time for divisions = 0
Evaluating C(X) over K took 121 msec
Scalar computation took 1786 msec
MSM took 121 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=4096: 1.928360925 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=4194304 and batch=256 is 0.9899239211875002 secs
Time to generate example for delta = 8192 is 2 secs
Time to commit t_com (excluded from lookup time) in 145ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 32 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3175 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 260 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 0
Evaluating C(X) over K took 259 msec
Scalar computation took 3998 msec
MSM took 235 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=8192: 4.264015532 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=4194304 and batch=256 is 2.0613033764609376 secs
Time to generate example for delta = 16384 is 2 secs
Time to commit t_com (excluded from lookup time) in 258ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 6862 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 506 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 506 msec
Scalar computation took 8407 msec
MSM took 418 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=16384: 8.871553459 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=4194304 and batch=256 is 4.332542131007812 secs
Time to generate example for delta = 32768 is 2 secs
Time to commit t_com (excluded from lookup time) in 499ms
Committed f_com in 11ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 15077 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1010 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 1
Evaluating C(X) over K took 1006 msec
Scalar computation took 18097 msec
MSM took 643 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=32768: 18.886824144 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=4194304 and batch=256 is 9.125426541810544 secs
Time to generate example for delta = 65536 is 2 secs
Time to commit t_com (excluded from lookup time) in 848ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 34 msec
Time for divisions = 16
Computed update params in 20 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 5 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 32969 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 2
Evaluating Z_I(X) over K took 2028 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 2
Evaluating C(X) over K took 2021 msec
Scalar computation took 38958 msec
MSM took 1222 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=65536: 40.400374623 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=4194304 and batch=256 is 19.405522289294918 secs
Time to generate example for delta = 131072 is 2 secs
Time to commit t_com (excluded from lookup time) in 1580ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 35 msec
Time for divisions = 37
Computed update params in 47 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 12 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 73720 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 4
Evaluating Z_I(X) over K took 4069 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 3
Evaluating C(X) over K took 3956 msec
Scalar computation took 85488 msec
MSM took 2218 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=131072: 88.056094431 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=4194304 and batch=256 is 41.840147802584944 secs
Time to generate example for delta = 262144 is 3 secs
Time to commit t_com (excluded from lookup time) in 3100ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 35 msec
Time for divisions = 84
Computed update params in 106 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 14 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 163167 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 7
Evaluating Z_I(X) over K took 7984 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 21 msec
Time for divisions = 8
Evaluating C(X) over K took 8073 msec
Scalar computation took 186687 msec
MSM took 3754 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=262144: 191.074356213 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=4194304 and batch=256 is 90.72783750511036 secs
Time to generate example for delta = 524288 is 3 secs
Time to commit t_com (excluded from lookup time) in 6239ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 36 msec
Time for divisions = 189
Computed update params in 237 secs
Time for sub-products = 0
Time for divisions = 24
Computed oracles on set I in 30 secs
Interpolated q polynomial in 59 secs
Time for sub-products = 0
Time for divisions = 24
Evaluated q_dvt on I in 24 secs
Computing a_vec over K took 358512 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 15
Evaluating Z_I(X) over K took 15979 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 21 msec
Time for divisions = 15
Evaluating C(X) over K took 15861 msec
Scalar computation took 405462 msec
MSM took 7392 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=524288: 414.037821603 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=4194304 and batch=256 is 196.66918042645102 secs
Time to generate example for delta = 1048576 is 3 secs
Time to commit t_com (excluded from lookup time) in 12190ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 38 msec
Time for divisions = 426
Computed update params in 529 secs
Time for sub-products = 0
Time for divisions = 53
Computed oracles on set I in 66 secs
Interpolated q polynomial in 126 secs
Time for sub-products = 0
Time for divisions = 52
Evaluated q_dvt on I in 52 secs
Computing a_vec over K took 787558 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 32
Evaluating Z_I(X) over K took 32239 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 23 msec
Time for divisions = 32
Evaluating C(X) over K took 32392 msec
Scalar computation took 882281 msec
MSM took 14654 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=1048576: 899.237695613 secs
===> Average (finish at delta=1048576) lookup time (without table init time) for table=4194304 and batch=256 is 426.68308376734814 secs
Time to generate example for delta = 2097152 is 9 secs
Time to commit t_com (excluded from lookup time) in 20219ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 40 msec
Time for divisions = 935
Computed update params in 1158 secs
Time for sub-products = 0
Time for divisions = 91
Computed oracles on set I in 105 secs
Interpolated q polynomial in 273 secs
Time for sub-products = 0
Time for divisions = 111
Evaluated q_dvt on I in 111 secs
Computing a_vec over K took 1659770 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 64
Evaluating Z_I(X) over K took 64824 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 23 msec
Time for divisions = 64
Evaluating C(X) over K took 65015 msec
Scalar computation took 1849417 msec
MSM took 26841 msecs
Proof Generation Time for table=4194304 and batch=256 and delta=2097152: 1880.708113801 secs
===> Average (finish at delta=2097152) lookup time (without table init time) for table=4194304 and batch=256 is 908.3579463373386 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=4194304 and batch=256 is 908.3579463373386 secs
Running setup for table size 4194304 and batch size 64
time to setup powers = 327.251862042s
dummy pp setup takes 334 seconds
dummy table init takes 2 seconds
Time to generate example for delta = 0 is 2 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=4194304 and batch=64 and delta=0: 0.006336633 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=4194304 and batch=64 is 0.006336633 secs
Time to generate example for delta = 64 is 2 secs
Time to commit t_com (excluded from lookup time) in 4ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 11 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 0 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 0 msec
Scalar computation took 26 msec
MSM took 6 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=64: 0.039696437 secs
===> Average (finish at delta=64) lookup time (without table init time) for table=4194304 and batch=64 is 0.023016535 secs
Time to generate example for delta = 128 is 2 secs
Time to commit t_com (excluded from lookup time) in 5ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 23 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 1 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 1 msec
Scalar computation took 42 msec
MSM took 12 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=128: 0.061855968 secs
===> Average (finish at delta=128) lookup time (without table init time) for table=4194304 and batch=64 is 0.039666310125 secs
Time to generate example for delta = 256 is 2 secs
Time to commit t_com (excluded from lookup time) in 10ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 49 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 3 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 4 msec
Scalar computation took 74 msec
MSM took 15 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=256: 0.097330244 secs
===> Average (finish at delta=256) lookup time (without table init time) for table=4194304 and batch=64 is 0.06184685031250001 secs
Time to generate example for delta = 512 is 2 secs
Time to commit t_com (excluded from lookup time) in 17ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 125 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 8 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 8 msec
Scalar computation took 163 msec
MSM took 27 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=512: 0.22571437 secs
===> Average (finish at delta=512) lookup time (without table init time) for table=4194304 and batch=64 is 0.11569658259375001 secs
Time to generate example for delta = 1024 is 2 secs
Time to commit t_com (excluded from lookup time) in 26ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 277 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 16 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 16 msec
Scalar computation took 341 msec
MSM took 48 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=1024: 0.398356181 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=4194304 and batch=64 is 0.21656345734375 secs
Time to generate example for delta = 2048 is 2 secs
Time to commit t_com (excluded from lookup time) in 47ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 615 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 33 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 33 msec
Scalar computation took 728 msec
MSM took 66 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=2048: 0.806309527 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=4194304 and batch=64 is 0.41263529118750003 secs
Time to generate example for delta = 4096 is 2 secs
Time to commit t_com (excluded from lookup time) in 89ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1388 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 68 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 68 msec
Scalar computation took 1607 msec
MSM took 124 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=4096: 1.747273474 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=4194304 and batch=64 is 0.8483890362617189 secs
Time to generate example for delta = 8192 is 2 secs
Time to commit t_com (excluded from lookup time) in 150ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3089 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 138 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 137 msec
Scalar computation took 3515 msec
MSM took 229 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=8192: 3.768112889 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=4194304 and batch=64 is 1.8069880608632816 secs
Time to generate example for delta = 16384 is 2 secs
Time to commit t_com (excluded from lookup time) in 260ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 6830 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 276 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 274 msec
Scalar computation took 7669 msec
MSM took 419 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=16384: 8.157874752 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=4194304 and batch=64 is 3.8892778175009766 secs
Time to generate example for delta = 32768 is 2 secs
Time to commit t_com (excluded from lookup time) in 514ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 14814 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 539 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 534 msec
Scalar computation took 16440 msec
MSM took 631 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=32768: 17.17444707 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=4194304 and batch=64 is 8.282121987452637 secs
Time to generate example for delta = 65536 is 2 secs
Time to commit t_com (excluded from lookup time) in 902ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 16
Computed update params in 21 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 5 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 33174 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1135 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 1
Evaluating C(X) over K took 1101 msec
Scalar computation took 36524 msec
MSM took 1220 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=65536: 37.918609583 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=4194304 and batch=64 is 17.919389649777347 secs
Time to generate example for delta = 131072 is 2 secs
Time to commit t_com (excluded from lookup time) in 1574ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 37
Computed update params in 47 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 12 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 74231 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 2
Evaluating Z_I(X) over K took 2209 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 2
Evaluating C(X) over K took 2197 msec
Scalar computation took 80821 msec
MSM took 2275 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=131072: 83.398997164 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=4194304 and batch=64 is 39.29464831676331 secs
Time to generate example for delta = 262144 is 3 secs
Time to commit t_com (excluded from lookup time) in 3182ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 84
Computed update params in 106 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 14 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 161922 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 4
Evaluating Z_I(X) over K took 4338 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 4
Evaluating C(X) over K took 4491 msec
Scalar computation took 175163 msec
MSM took 3768 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=262144: 179.51360166 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=4194304 and batch=64 is 85.38134023428498 secs
Time to generate example for delta = 524288 is 3 secs
Time to commit t_com (excluded from lookup time) in 6366ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 190
Computed update params in 237 secs
Time for sub-products = 0
Time for divisions = 24
Computed oracles on set I in 31 secs
Interpolated q polynomial in 59 secs
Time for sub-products = 0
Time for divisions = 24
Evaluated q_dvt on I in 24 secs
Computing a_vec over K took 358264 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 8
Evaluating Z_I(X) over K took 8735 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 8
Evaluating C(X) over K took 8732 msec
Scalar computation took 384425 msec
MSM took 7726 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=524288: 393.343594385 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=4194304 and batch=64 is 185.91149470190047 secs
Time to generate example for delta = 1048576 is 3 secs
Time to commit t_com (excluded from lookup time) in 12169ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 428
Computed update params in 531 secs
Time for sub-products = 0
Time for divisions = 53
Computed oracles on set I in 66 secs
Interpolated q polynomial in 127 secs
Time for sub-products = 0
Time for divisions = 52
Evaluated q_dvt on I in 52 secs
Computing a_vec over K took 789032 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 17
Evaluating Z_I(X) over K took 18027 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 17
Evaluating C(X) over K took 17578 msec
Scalar computation took 842317 msec
MSM took 14640 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=1048576: 859.217126428 secs
===> Average (finish at delta=1048576) lookup time (without table init time) for table=4194304 and batch=64 is 406.1030362201554 secs
Time to generate example for delta = 2097152 is 10 secs
Time to commit t_com (excluded from lookup time) in 19669ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 8 msec
Time for divisions = 937
Computed update params in 1158 secs
Time for sub-products = 0
Time for divisions = 89
Computed oracles on set I in 103 secs
Interpolated q polynomial in 271 secs
Time for sub-products = 0
Time for divisions = 109
Evaluated q_dvt on I in 109 secs
Computing a_vec over K took 1655245 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 35
Evaluating Z_I(X) over K took 35754 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 5 msec
Time for divisions = 34
Evaluating C(X) over K took 34896 msec
Scalar computation took 1760883 msec
MSM took 26728 msecs
Proof Generation Time for table=4194304 and batch=64 and delta=2097152: 1792.039690548 secs
===> Average (finish at delta=2097152) lookup time (without table init time) for table=4194304 and batch=64 is 865.8728392254469 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=4194304 and batch=64 is 865.8728392254469 secs
Running setup for table size 8388608 and batch size 1024
time to setup powers = 622.540106114s
dummy pp setup takes 632 seconds
dummy table init takes 5 seconds
Time to generate example for delta = 0 is 5 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=8388608 and batch=1024 and delta=0: 0.023109087 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=8388608 and batch=1024 is 0.023109087 secs
Time to generate example for delta = 1024 is 5 secs
Time to commit t_com (excluded from lookup time) in 27ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 208 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 393 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 55 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 54 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 101 msec
Time for divisions = 0
Evaluating C(X) over K took 109 msec
Scalar computation took 1051 msec
MSM took 49 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=1024: 1.311022086 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=8388608 and batch=1024 is 0.6670655864999999 secs
Time to generate example for delta = 2048 is 6 secs
Time to commit t_com (excluded from lookup time) in 48ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 204 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 746 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 55 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 157 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 105 msec
Time for divisions = 0
Evaluating C(X) over K took 268 msec
Scalar computation took 1748 msec
MSM took 69 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=2048: 1.849085966 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=8388608 and batch=1024 is 1.19081779125 secs
Time to generate example for delta = 4096 is 5 secs
Time to commit t_com (excluded from lookup time) in 86ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 193 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1481 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 55 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 363 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 104 msec
Time for divisions = 0
Evaluating C(X) over K took 582 msec
Scalar computation took 3151 msec
MSM took 128 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=4096: 3.313972925 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=8388608 and batch=1024 is 1.9777290533125 secs
Time to generate example for delta = 8192 is 5 secs
Time to commit t_com (excluded from lookup time) in 145ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 198 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3156 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 738 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 103 msec
Time for divisions = 1
Evaluating C(X) over K took 1147 msec
Scalar computation took 6057 msec
MSM took 223 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=8192: 6.506563971 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=8388608 and batch=1024 is 3.54376722084375 secs
Time to generate example for delta = 16384 is 5 secs
Time to commit t_com (excluded from lookup time) in 260ms
Committed f_com in 34ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 209 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 7158 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 54 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1567 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 104 msec
Time for divisions = 2
Evaluating C(X) over K took 2403 msec
Scalar computation took 12789 msec
MSM took 414 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=16384: 13.447810733 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=8388608 and batch=1024 is 6.868934267078127 secs
Time to generate example for delta = 32768 is 6 secs
Time to commit t_com (excluded from lookup time) in 509ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 204 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 15196 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 54 msec
Time for divisions = 3
Evaluating Z_I(X) over K took 3148 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 106 msec
Time for divisions = 4
Evaluating C(X) over K took 4716 msec
Scalar computation took 25933 msec
MSM took 632 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=32768: 26.84550793 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=8388608 and batch=1024 is 13.612466308640627 secs
Time to generate example for delta = 65536 is 6 secs
Time to commit t_com (excluded from lookup time) in 870ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 207 msec
Time for divisions = 16
Computed update params in 21 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 5 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 33335 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 53 msec
Time for divisions = 6
Evaluating Z_I(X) over K took 6213 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 106 msec
Time for divisions = 9
Evaluating C(X) over K took 9481 msec
Scalar computation took 54439 msec
MSM took 1202 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=65536: 56.000428459 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=8388608 and batch=1024 is 27.63160365988672 secs
Time to generate example for delta = 131072 is 6 secs
Time to commit t_com (excluded from lookup time) in 1533ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 204 msec
Time for divisions = 37
Computed update params in 47 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 12 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 73551 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 55 msec
Time for divisions = 12
Evaluating Z_I(X) over K took 12794 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 118 msec
Time for divisions = 19
Evaluating C(X) over K took 19819 msec
Scalar computation took 116460 msec
MSM took 2220 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=131072: 119.168957463 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=8388608 and batch=1024 is 57.7315243436543 secs
Time to generate example for delta = 262144 is 6 secs
Time to commit t_com (excluded from lookup time) in 3099ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 206 msec
Time for divisions = 84
Computed update params in 106 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 14 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 163391 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 53 msec
Time for divisions = 25
Evaluating Z_I(X) over K took 25342 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 111 msec
Time for divisions = 38
Evaluating C(X) over K took 38923 msec
Scalar computation took 247942 msec
MSM took 3833 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=262144: 252.566869069 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=8388608 and batch=1024 is 121.92999020287988 secs
Time to generate example for delta = 524288 is 6 secs
Time to commit t_com (excluded from lookup time) in 6230ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 216 msec
Time for divisions = 190
Computed update params in 237 secs
Time for sub-products = 0
Time for divisions = 24
Computed oracles on set I in 31 secs
Interpolated q polynomial in 59 secs
Time for sub-products = 0
Time for divisions = 25
Evaluated q_dvt on I in 25 secs
Computing a_vec over K took 359137 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 54 msec
Time for divisions = 51
Evaluating Z_I(X) over K took 51330 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 116 msec
Time for divisions = 76
Evaluating C(X) over K took 76545 msec
Scalar computation took 527433 msec
MSM took 7507 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=524288: 536.341290375 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=8388608 and batch=1024 is 258.33059669159326 secs
Time to generate example for delta = 1048576 is 6 secs
Time to commit t_com (excluded from lookup time) in 12057ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 214 msec
Time for divisions = 429
Computed update params in 533 secs
Time for sub-products = 0
Time for divisions = 52
Computed oracles on set I in 66 secs
Interpolated q polynomial in 127 secs
Time for sub-products = 0
Time for divisions = 53
Evaluated q_dvt on I in 53 secs
Computing a_vec over K took 792211 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 56 msec
Time for divisions = 102
Evaluating Z_I(X) over K took 102409 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 119 msec
Time for divisions = 154
Evaluating C(X) over K took 154947 msec
Scalar computation took 1130577 msec
MSM took 14977 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=1048576: 1148.244599329 secs
===> Average (finish at delta=1048576) lookup time (without table init time) for table=8388608 and batch=1024 is 550.4611612280842 secs
Time to generate example for delta = 2097152 is 7 secs
Time to commit t_com (excluded from lookup time) in 20360ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 217 msec
Time for divisions = 955
Computed update params in 1177 secs
Time for sub-products = 0
Time for divisions = 112
Computed oracles on set I in 139 secs
Interpolated q polynomial in 272 secs
Time for sub-products = 0
Time for divisions = 111
Evaluated q_dvt on I in 111 secs
Computing a_vec over K took 1723623 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 204
Evaluating Z_I(X) over K took 204781 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 174 msec
Time for divisions = 310
Evaluating C(X) over K took 311308 msec
Scalar computation took 2399475 msec
MSM took 26634 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=2097152: 2430.943213643 secs
===> Average (finish at delta=2097152) lookup time (without table init time) for table=8388608 and batch=1024 is 1170.184113277734 secs
Time to generate example for delta = 4194304 is 20 secs
Time to commit t_com (excluded from lookup time) in 39544ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 311 msec
Time for divisions = 2089
Computed update params in 2568 secs
Time for sub-products = 0
Time for divisions = 190
Computed oracles on set I in 220 secs
Interpolated q polynomial in 582 secs
Time for sub-products = 0
Time for divisions = 231
Evaluated q_dvt on I in 231 secs
Computing a_vec over K took 3626116 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 55 msec
Time for divisions = 411
Evaluating Z_I(X) over K took 412084 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 362 msec
Time for divisions = 621
Evaluating C(X) over K took 622627 msec
Scalar computation took 4982602 msec
MSM took 53412 msecs
Proof Generation Time for table=8388608 and batch=1024 and delta=4194304: 5045.564244837 secs
===> Average (finish at delta=4194304) lookup time (without table init time) for table=8388608 and batch=1024 is 2454.3785050620404 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=8388608 and batch=1024 is 2454.3785050620404 secs
Running setup for table size 8388608 and batch size 256
time to setup powers = 619.876927659s
dummy pp setup takes 652 seconds
dummy table init takes 5 seconds
Time to generate example for delta = 0 is 5 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=8388608 and batch=256 and delta=0: 0.01061429 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=8388608 and batch=256 is 0.01061429 secs
Time to generate example for delta = 256 is 5 secs
Time to commit t_com (excluded from lookup time) in 9ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 63 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 3 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 17 msec
Time for divisions = 0
Evaluating C(X) over K took 5 msec
Scalar computation took 144 msec
MSM took 14 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=256: 0.170441336 secs
===> Average (finish at delta=256) lookup time (without table init time) for table=8388608 and batch=256 is 0.090527813 secs
Time to generate example for delta = 512 is 5 secs
Time to commit t_com (excluded from lookup time) in 16ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 134 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 11 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 17 msec
Time for divisions = 0
Evaluating C(X) over K took 13 msec
Scalar computation took 236 msec
MSM took 26 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=512: 0.27560901 secs
===> Average (finish at delta=512) lookup time (without table init time) for table=8388608 and batch=256 is 0.16992245225 secs
Time to generate example for delta = 1024 is 5 secs
Time to commit t_com (excluded from lookup time) in 26ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 34 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 291 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 27 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 29 msec
Scalar computation took 443 msec
MSM took 48 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=1024: 0.505471732 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=8388608 and batch=256 is 0.29459783175 secs
Time to generate example for delta = 2048 is 5 secs
Time to commit t_com (excluded from lookup time) in 45ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 642 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 58 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 61 msec
Scalar computation took 885 msec
MSM took 67 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=2048: 0.968933925 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=8388608 and batch=256 is 0.53038352365625 secs
Time to generate example for delta = 4096 is 5 secs
Time to commit t_com (excluded from lookup time) in 87ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 33 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1386 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 120 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 17 msec
Time for divisions = 0
Evaluating C(X) over K took 121 msec
Scalar computation took 1807 msec
MSM took 121 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=4096: 1.95011848 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=8388608 and batch=256 is 1.0102858717499998 secs
Time to generate example for delta = 8192 is 5 secs
Time to commit t_com (excluded from lookup time) in 145ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 34 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3130 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 258 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 259 msec
Scalar computation took 3955 msec
MSM took 237 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=8192: 4.222893489 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=8388608 and batch=256 is 2.0661519828828125 secs
Time to generate example for delta = 16384 is 6 secs
Time to commit t_com (excluded from lookup time) in 261ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 34 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 6849 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 506 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 18 msec
Time for divisions = 0
Evaluating C(X) over K took 506 msec
Scalar computation took 8399 msec
MSM took 418 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=16384: 8.866016635 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=8388608 and batch=256 is 4.323440722230469 secs
Time to generate example for delta = 32768 is 6 secs
Time to commit t_com (excluded from lookup time) in 529ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 35 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 15019 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1009 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 1
Evaluating C(X) over K took 1009 msec
Scalar computation took 18044 msec
MSM took 649 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=32768: 18.847866843 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=8388608 and batch=256 is 9.109687031802732 secs
Time to generate example for delta = 65536 is 6 secs
Time to commit t_com (excluded from lookup time) in 859ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 35 msec
Time for divisions = 16
Computed update params in 21 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 5 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 33474 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 2004 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 1
Evaluating C(X) over K took 1981 msec
Scalar computation took 39372 msec
MSM took 1200 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=65536: 40.797059428 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=8388608 and batch=256 is 19.487509842035156 secs
Time to generate example for delta = 131072 is 6 secs
Time to commit t_com (excluded from lookup time) in 1533ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 34 msec
Time for divisions = 37
Computed update params in 47 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 12 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 73118 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 3
Evaluating Z_I(X) over K took 3949 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 3
Evaluating C(X) over K took 3955 msec
Scalar computation took 84799 msec
MSM took 2224 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=131072: 87.388147774 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=8388608 and batch=256 is 41.81280627637402 secs
Time to generate example for delta = 262144 is 6 secs
Time to commit t_com (excluded from lookup time) in 3190ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 34 msec
Time for divisions = 84
Computed update params in 106 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 14 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 162703 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 7
Evaluating Z_I(X) over K took 7942 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 19 msec
Time for divisions = 7
Evaluating C(X) over K took 7947 msec
Scalar computation took 186117 msec
MSM took 3857 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=262144: 190.640696225 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=8388608 and batch=256 is 90.43882227964869 secs
Time to generate example for delta = 524288 is 6 secs
Time to commit t_com (excluded from lookup time) in 6241ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 36 msec
Time for divisions = 190
Computed update params in 238 secs
Time for sub-products = 0
Time for divisions = 24
Computed oracles on set I in 31 secs
Interpolated q polynomial in 58 secs
Time for sub-products = 0
Time for divisions = 25
Evaluated q_dvt on I in 25 secs
Computing a_vec over K took 358641 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 15
Evaluating Z_I(X) over K took 15918 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 20 msec
Time for divisions = 16
Evaluating C(X) over K took 16562 msec
Scalar computation took 405993 msec
MSM took 7369 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=524288: 414.597205246 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=8388608 and batch=256 is 196.55622494861697 secs
Time to generate example for delta = 1048576 is 6 secs
Time to commit t_com (excluded from lookup time) in 11891ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 37 msec
Time for divisions = 426
Computed update params in 531 secs
Time for sub-products = 0
Time for divisions = 52
Computed oracles on set I in 65 secs
Interpolated q polynomial in 127 secs
Time for sub-products = 0
Time for divisions = 52
Evaluated q_dvt on I in 52 secs
Computing a_vec over K took 788104 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 32
Evaluating Z_I(X) over K took 32441 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 21 msec
Time for divisions = 31
Evaluating C(X) over K took 31888 msec
Scalar computation took 882683 msec
MSM took 14539 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=1048576: 899.669634626 secs
===> Average (finish at delta=1048576) lookup time (without table init time) for table=8388608 and batch=256 is 426.8744289138283 secs
Time to generate example for delta = 2097152 is 7 secs
Time to commit t_com (excluded from lookup time) in 20181ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 38 msec
Time for divisions = 952
Computed update params in 1176 secs
Time for sub-products = 0
Time for divisions = 111
Computed oracles on set I in 138 secs
Interpolated q polynomial in 270 secs
Time for sub-products = 0
Time for divisions = 110
Evaluated q_dvt on I in 111 secs
Computing a_vec over K took 1720772 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 8 msec
Time for divisions = 64
Evaluating Z_I(X) over K took 64477 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 22 msec
Time for divisions = 64
Evaluating C(X) over K took 65267 msec
Scalar computation took 1910795 msec
MSM took 26981 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=2097152: 1942.547769018 secs
===> Average (finish at delta=2097152) lookup time (without table init time) for table=8388608 and batch=256 is 924.0233914828552 secs
Time to generate example for delta = 4194304 is 22 secs
Time to commit t_com (excluded from lookup time) in 39610ms
Committed f_com in 12ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 41 msec
Time for divisions = 2078
Computed update params in 2555 secs
Time for sub-products = 0
Time for divisions = 187
Computed oracles on set I in 217 secs
Interpolated q polynomial in 579 secs
Time for sub-products = 0
Time for divisions = 229
Evaluated q_dvt on I in 229 secs
Computing a_vec over K took 3604660 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 7 msec
Time for divisions = 127
Evaluating Z_I(X) over K took 128710 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 24 msec
Time for divisions = 128
Evaluating C(X) over K took 129764 msec
Scalar computation took 3983524 msec
MSM took 53704 msecs
Proof Generation Time for table=8388608 and batch=256 and delta=4194304: 4046.540533083 secs
===> Average (finish at delta=4194304) lookup time (without table init time) for table=8388608 and batch=256 is 1959.3158756484538 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=8388608 and batch=256 is 1959.3158756484538 secs
Running setup for table size 8388608 and batch size 64
time to setup powers = 622.72030037s
dummy pp setup takes 646 seconds
dummy table init takes 5 seconds
Time to generate example for delta = 0 is 5 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=8388608 and batch=64 and delta=0: 0.006072151 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=8388608 and batch=64 is 0.006072151 secs
Time to generate example for delta = 64 is 5 secs
Time to commit t_com (excluded from lookup time) in 4ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 194 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 102 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 0 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 0 msec
Scalar computation took 305 msec
MSM took 6 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=64: 0.317961231 secs
===> Average (finish at delta=64) lookup time (without table init time) for table=8388608 and batch=64 is 0.16201669100000002 secs
Time to generate example for delta = 128 is 5 secs
Time to commit t_com (excluded from lookup time) in 5ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 22 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 1 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 1 msec
Scalar computation took 40 msec
MSM took 11 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=128: 0.058289354 secs
===> Average (finish at delta=128) lookup time (without table init time) for table=8388608 and batch=64 is 0.142612007125 secs
Time to generate example for delta = 256 is 5 secs
Time to commit t_com (excluded from lookup time) in 10ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 48 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 3 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 4 msec
Scalar computation took 73 msec
MSM took 14 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=256: 0.095206874 secs
===> Average (finish at delta=256) lookup time (without table init time) for table=8388608 and batch=64 is 0.1119874055625 secs
Time to generate example for delta = 512 is 5 secs
Time to commit t_com (excluded from lookup time) in 17ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 121 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 7 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 7 msec
Scalar computation took 158 msec
MSM took 26 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=512: 0.192667533 secs
===> Average (finish at delta=512) lookup time (without table init time) for table=8388608 and batch=64 is 0.131007950125 secs
Time to generate example for delta = 1024 is 5 secs
Time to commit t_com (excluded from lookup time) in 26ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 278 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 16 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 16 msec
Scalar computation took 341 msec
MSM took 48 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=1024: 0.398861514 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=8388608 and batch=64 is 0.216608017765625 secs
Time to generate example for delta = 2048 is 5 secs
Time to commit t_com (excluded from lookup time) in 47ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 621 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 34 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 33 msec
Scalar computation took 737 msec
MSM took 67 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=2048: 0.816455168 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=8388608 and batch=64 is 0.4153956298046875 secs
Time to generate example for delta = 4096 is 5 secs
Time to commit t_com (excluded from lookup time) in 86ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1351 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 66 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 66 msec
Scalar computation took 1564 msec
MSM took 122 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=4096: 1.7028816469999999 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=8388608 and batch=64 is 0.8409946220859374 secs
Time to generate example for delta = 8192 is 5 secs
Time to commit t_com (excluded from lookup time) in 145ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3028 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 135 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 133 msec
Scalar computation took 3445 msec
MSM took 223 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=8192: 3.721609251 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=8388608 and batch=64 is 1.7805628628945316 secs
Time to generate example for delta = 16384 is 5 secs
Time to commit t_com (excluded from lookup time) in 253ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 6680 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 270 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 267 msec
Scalar computation took 7501 msec
MSM took 410 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=16384: 7.952906014 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=8388608 and batch=64 is 3.8130423734423835 secs
Time to generate example for delta = 32768 is 5 secs
Time to commit t_com (excluded from lookup time) in 500ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 14818 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 555 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 0
Evaluating C(X) over K took 549 msec
Scalar computation took 16488 msec
MSM took 640 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=32768: 17.207049328 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=8388608 and batch=64 is 8.20102864688623 secs
Time to generate example for delta = 65536 is 6 secs
Time to commit t_com (excluded from lookup time) in 849ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 6 msec
Time for divisions = 16
Computed update params in 20 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 5 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 32853 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1082 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 1
Evaluating C(X) over K took 1070 msec
Scalar computation took 36120 msec
MSM took 1266 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=65536: 37.567684941 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=8388608 and batch=64 is 17.799168748997076 secs
Time to generate example for delta = 131072 is 6 secs
Time to commit t_com (excluded from lookup time) in 1605ms
Committed f_com in 4ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 36
Computed update params in 46 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 12 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 72721 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 2
Evaluating Z_I(X) over K took 2162 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 2
Evaluating C(X) over K took 2174 msec
Scalar computation took 79268 msec
MSM took 2280 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=131072: 81.868682128 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=8388608 and batch=64 is 38.76408397831921 secs
Time to generate example for delta = 262144 is 6 secs
Time to commit t_com (excluded from lookup time) in 3140ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 84
Computed update params in 106 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 14 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 163016 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 4
Evaluating Z_I(X) over K took 4400 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 4
Evaluating C(X) over K took 4375 msec
Scalar computation took 176186 msec
MSM took 3824 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=262144: 180.635648748 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=8388608 and batch=64 is 85.0141529653996 secs
Time to generate example for delta = 524288 is 6 secs
Time to commit t_com (excluded from lookup time) in 6290ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 190
Computed update params in 238 secs
Time for sub-products = 0
Time for divisions = 24
Computed oracles on set I in 31 secs
Interpolated q polynomial in 59 secs
Time for sub-products = 0
Time for divisions = 24
Evaluated q_dvt on I in 24 secs
Computing a_vec over K took 359303 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 8
Evaluating Z_I(X) over K took 8867 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 3 msec
Time for divisions = 8
Evaluating C(X) over K took 8778 msec
Scalar computation took 385616 msec
MSM took 7392 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=524288: 394.19372051 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=8388608 and batch=64 is 186.22093607233907 secs
Time to generate example for delta = 1048576 is 6 secs
Time to commit t_com (excluded from lookup time) in 12111ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 428
Computed update params in 532 secs
Time for sub-products = 0
Time for divisions = 52
Computed oracles on set I in 65 secs
Interpolated q polynomial in 127 secs
Time for sub-products = 0
Time for divisions = 53
Evaluated q_dvt on I in 53 secs
Computing a_vec over K took 790015 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 17
Evaluating Z_I(X) over K took 17510 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 17
Evaluating C(X) over K took 17379 msec
Scalar computation took 842554 msec
MSM took 14587 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=1048576: 859.509009525 secs
===> Average (finish at delta=1048576) lookup time (without table init time) for table=8388608 and batch=64 is 406.54325069276223 secs
Time to generate example for delta = 2097152 is 7 secs
Time to commit t_com (excluded from lookup time) in 20013ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 7 msec
Time for divisions = 956
Computed update params in 1178 secs
Time for sub-products = 0
Time for divisions = 111
Computed oracles on set I in 138 secs
Interpolated q polynomial in 272 secs
Time for sub-products = 0
Time for divisions = 110
Evaluated q_dvt on I in 110 secs
Computing a_vec over K took 1722682 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 34
Evaluating Z_I(X) over K took 35411 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 34
Evaluating C(X) over K took 34669 msec
Scalar computation took 1827771 msec
MSM took 26705 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=2097152: 1859.093540696 secs
===> Average (finish at delta=2097152) lookup time (without table init time) for table=8388608 and batch=64 is 882.9298891263868 secs
Time to generate example for delta = 4194304 is 21 secs
Time to commit t_com (excluded from lookup time) in 39848ms
Committed f_com in 5ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 8 msec
Time for divisions = 2080
Computed update params in 2556 secs
Time for sub-products = 0
Time for divisions = 185
Computed oracles on set I in 215 secs
Interpolated q polynomial in 580 secs
Time for sub-products = 0
Time for divisions = 229
Evaluated q_dvt on I in 229 secs
Computing a_vec over K took 3604839 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 1 msec
Time for divisions = 69
Evaluating Z_I(X) over K took 70857 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 4 msec
Time for divisions = 69
Evaluating C(X) over K took 70587 msec
Scalar computation took 3816926 msec
MSM took 53808 msecs
Proof Generation Time for table=8388608 and batch=64 and delta=4194304: 3879.823636707 secs
===> Average (finish at delta=4194304) lookup time (without table init time) for table=8388608 and batch=64 is 1876.201947387514 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=8388608 and batch=64 is 1876.201947387514 secs
Running setup for table size 16777216 and batch size 1024
time to setup powers = 1178.165157937s
dummy pp setup takes 1198 seconds
dummy table init takes 11 seconds
Time to generate example for delta = 0 is 10 secs
Time to commit t_com (excluded from lookup time) in 0ms
Committed f_com in 0ms
Using update = false
Proof Generation Time for table=16777216 and batch=1024 and delta=0: 0.022358021 secs
===> Average (finish at delta=0) lookup time (without table init time) for table=16777216 and batch=1024 is 0.022358021 secs
Time to generate example for delta = 1024 is 11 secs
Time to commit t_com (excluded from lookup time) in 25ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 197 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 363 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 51 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 98 msec
Time for divisions = 0
Evaluating C(X) over K took 105 msec
Scalar computation took 993 msec
MSM took 47 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=1024: 1.066371437 secs
===> Average (finish at delta=1024) lookup time (without table init time) for table=16777216 and batch=1024 is 0.544364729 secs
Time to generate example for delta = 2048 is 11 secs
Time to commit t_com (excluded from lookup time) in 47ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 199 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 718 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 53 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 153 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 101 msec
Time for divisions = 0
Evaluating C(X) over K took 261 msec
Scalar computation took 1692 msec
MSM took 68 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=2048: 1.789072408 secs
===> Average (finish at delta=2048) lookup time (without table init time) for table=16777216 and batch=1024 is 1.076380947125 secs
Time to generate example for delta = 4096 is 12 secs
Time to commit t_com (excluded from lookup time) in 89ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 199 msec
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 1488 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 53 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 354 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 101 msec
Time for divisions = 0
Evaluating C(X) over K took 566 msec
Scalar computation took 3120 msec
MSM took 124 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=4096: 3.282135317 secs
===> Average (finish at delta=4096) lookup time (without table init time) for table=16777216 and batch=1024 is 1.8993088366250002 secs
Time to generate example for delta = 8192 is 12 secs
Time to commit t_com (excluded from lookup time) in 149ms
Committed f_com in 0ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 199 msec
Time for divisions = 1
Computed update params in 1 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 3200 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 53 msec
Time for divisions = 0
Evaluating Z_I(X) over K took 755 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 100 msec
Time for divisions = 1
Evaluating C(X) over K took 1173 msec
Scalar computation took 6156 msec
MSM took 229 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=8192: 6.429268095 secs
===> Average (finish at delta=8192) lookup time (without table init time) for table=16777216 and batch=1024 is 3.475853170625 secs
Time to generate example for delta = 16384 is 12 secs
Time to commit t_com (excluded from lookup time) in 252ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 198 msec
Time for divisions = 3
Computed update params in 4 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 1 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing a_vec over K took 6798 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 1
Evaluating Z_I(X) over K took 1516 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 102 msec
Time for divisions = 2
Evaluating C(X) over K took 2336 msec
Scalar computation took 12301 msec
MSM took 418 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=16384: 12.962428154 secs
===> Average (finish at delta=16384) lookup time (without table init time) for table=16777216 and batch=1024 is 6.687931273484375 secs
Time to generate example for delta = 32768 is 12 secs
Time to commit t_com (excluded from lookup time) in 498ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 199 msec
Time for divisions = 7
Computed update params in 9 secs
Time for sub-products = 0
Time for divisions = 1
Computed oracles on set I in 1 secs
Interpolated q polynomial in 2 secs
Time for sub-products = 0
Time for divisions = 1
Evaluated q_dvt on I in 1 secs
Computing a_vec over K took 15087 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 3
Evaluating Z_I(X) over K took 3076 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 103 msec
Time for divisions = 4
Evaluating C(X) over K took 4836 msec
Scalar computation took 25861 msec
MSM took 632 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=32768: 26.772764808 secs
===> Average (finish at delta=32768) lookup time (without table init time) for table=16777216 and batch=1024 is 13.385657132351563 secs
Time to generate example for delta = 65536 is 12 secs
Time to commit t_com (excluded from lookup time) in 862ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 201 msec
Time for divisions = 16
Computed update params in 20 secs
Time for sub-products = 0
Time for divisions = 2
Computed oracles on set I in 3 secs
Interpolated q polynomial in 5 secs
Time for sub-products = 0
Time for divisions = 2
Evaluated q_dvt on I in 2 secs
Computing a_vec over K took 32959 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 6
Evaluating Z_I(X) over K took 6193 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 104 msec
Time for divisions = 9
Evaluating C(X) over K took 9871 msec
Scalar computation took 54487 msec
MSM took 1200 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=65536: 56.040163746 secs
===> Average (finish at delta=65536) lookup time (without table init time) for table=16777216 and batch=1024 is 27.510386481777342 secs
Time to generate example for delta = 131072 is 12 secs
Time to commit t_com (excluded from lookup time) in 1581ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 209 msec
Time for divisions = 37
Computed update params in 47 secs
Time for sub-products = 0
Time for divisions = 5
Computed oracles on set I in 6 secs
Interpolated q polynomial in 12 secs
Time for sub-products = 0
Time for divisions = 5
Evaluated q_dvt on I in 5 secs
Computing a_vec over K took 74117 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 54 msec
Time for divisions = 12
Evaluating Z_I(X) over K took 12662 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 111 msec
Time for divisions = 19
Evaluating C(X) over K took 19568 msec
Scalar computation took 116738 msec
MSM took 2346 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=131072: 119.594218587 secs
===> Average (finish at delta=131072) lookup time (without table init time) for table=16777216 and batch=1024 is 57.7879178375 secs
Time to generate example for delta = 262144 is 12 secs
Time to commit t_com (excluded from lookup time) in 3219ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 210 msec
Time for divisions = 84
Computed update params in 106 secs
Time for sub-products = 0
Time for divisions = 11
Computed oracles on set I in 15 secs
Interpolated q polynomial in 27 secs
Time for sub-products = 0
Time for divisions = 11
Evaluated q_dvt on I in 11 secs
Computing a_vec over K took 163036 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 25
Evaluating Z_I(X) over K took 25196 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 113 msec
Time for divisions = 39
Evaluating C(X) over K took 39127 msec
Scalar computation took 247669 msec
MSM took 3784 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=262144: 252.267775486 secs
===> Average (finish at delta=262144) lookup time (without table init time) for table=16777216 and batch=1024 is 121.98902145740911 secs
Time to generate example for delta = 524288 is 12 secs
Time to commit t_com (excluded from lookup time) in 6254ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 207 msec
Time for divisions = 190
Computed update params in 238 secs
Time for sub-products = 0
Time for divisions = 25
Computed oracles on set I in 31 secs
Interpolated q polynomial in 58 secs
Time for sub-products = 0
Time for divisions = 24
Evaluated q_dvt on I in 24 secs
Computing a_vec over K took 360117 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 50
Evaluating Z_I(X) over K took 50785 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 111 msec
Time for divisions = 78
Evaluating C(X) over K took 78103 msec
Scalar computation took 529825 msec
MSM took 7493 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=524288: 538.751313364 secs
===> Average (finish at delta=524288) lookup time (without table init time) for table=16777216 and batch=1024 is 258.8891674811841 secs
Time to generate example for delta = 1048576 is 13 secs
Time to commit t_com (excluded from lookup time) in 11969ms
Committed f_com in 33ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 215 msec
Time for divisions = 428
Computed update params in 531 secs
Time for sub-products = 0
Time for divisions = 53
Computed oracles on set I in 66 secs
Interpolated q polynomial in 126 secs
Time for sub-products = 0
Time for divisions = 53
Evaluated q_dvt on I in 53 secs
Computing a_vec over K took 790940 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 55 msec
Time for divisions = 101
Evaluating Z_I(X) over K took 101734 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 117 msec
Time for divisions = 156
Evaluating C(X) over K took 156577 msec
Scalar computation took 1130034 msec
MSM took 14459 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=1048576: 1147.121242255 secs
===> Average (finish at delta=1048576) lookup time (without table init time) for table=16777216 and batch=1024 is 551.061250460013 secs
Time to generate example for delta = 2097152 is 13 secs
Time to commit t_com (excluded from lookup time) in 20618ms
Committed f_com in 38ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 220 msec
Time for divisions = 956
Computed update params in 1178 secs
Time for sub-products = 0
Time for divisions = 111
Computed oracles on set I in 138 secs
Interpolated q polynomial in 271 secs
Time for sub-products = 0
Time for divisions = 112
Evaluated q_dvt on I in 113 secs
Computing a_vec over K took 1724653 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 203
Evaluating Z_I(X) over K took 203614 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 160 msec
Time for divisions = 311
Evaluating C(X) over K took 311744 msec
Scalar computation took 2400148 msec
MSM took 26842 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=2097152: 2432.012241162 secs
===> Average (finish at delta=2097152) lookup time (without table init time) for table=16777216 and batch=1024 is 1170.4708431300214 secs
Time to generate example for delta = 4194304 is 15 secs
Time to commit t_com (excluded from lookup time) in 39364ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 230 msec
Time for divisions = 2116
Computed update params in 2598 secs
Time for sub-products = 0
Time for divisions = 234
Computed oracles on set I in 287 secs
Interpolated q polynomial in 580 secs
Time for sub-products = 0
Time for divisions = 233
Evaluated q_dvt on I in 233 secs
Computing a_vec over K took 3746393 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 52 msec
Time for divisions = 407
Evaluating Z_I(X) over K took 408318 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 157 msec
Time for divisions = 620
Evaluating C(X) over K took 621176 msec
Scalar computation took 5096922 msec
MSM took 53423 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=4194304: 5160.222736106 secs
===> Average (finish at delta=4194304) lookup time (without table init time) for table=16777216 and batch=1024 is 2483.4606826358436 secs
Time to generate example for delta = 8388608 is 46 secs
Time to commit t_com (excluded from lookup time) in 77675ms
Committed f_com in 32ms
Using update = true
Time for divisions = 0
Computed update params in 0 secs
Time for sub-products = 0
Time for divisions = 0
Computed oracles on set I in 0 secs
Interpolated q polynomial in 0 secs
Time for sub-products = 0
Time for divisions = 0
Evaluated q_dvt on I in 0 secs
Computing b_vec over I took 223 msec
Time for divisions = 4616
Computed update params in 5643 secs
Time for sub-products = 0
Time for divisions = 394
Computed oracles on set I in 453 secs
Interpolated q polynomial in 1233 secs
Time for sub-products = 0
Time for divisions = 480
Evaluated q_dvt on I in 480 secs
Computing a_vec over K took 7857283 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Evaluating Z_I'(X) over I took 53 msec
Time for divisions = 814
Evaluating Z_I(X) over K took 816280 msec
Time taken: 0
Time for sub-products = 0
Time for divisions = 0
Interpolating C(X) took 471 msec
Time for divisions = 1243
Evaluating C(X) over K took 1245302 msec
Scalar computation took 10559641 msec
MSM took 102043 msecs
Proof Generation Time for table=16777216 and batch=1024 and delta=8388608: 10680.976465508 secs
===> Average (finish at delta=8388608) lookup time (without table init time) for table=16777216 and batch=1024 is 5202.198621754667 secs
===> Average (finish at delta=table) lookup time (without table init time) for table=16777216 and batch=1024 is 5202.198621754667 secs
Running setup for table size 16777216 and batch size 256
time to setup powers = 1179.089230054s
dummy pp setup takes 1219 seconds
dummy table init takes 10 seconds
